<funcs>
	<group name="Audio functions">
	 	<function name="playSoundFrontEnd" ret="bool">
	 		 	<param name="int sound" type="required" />
	 		 	<description>This function plays a frontend sound for the specified player.</description>
	 	</function>
	 	<function name="getRadioChannel" ret="int">
	 		 	<description>This function retrieves the ID of the currently active radio channel.</description>
	 	</function>
	 	<function name="getRadioChannelName" ret="string">
	 		 	<param name="int id" type="required" />
	 		 	<description>This function gets the given radio channel name.</description>
	 	</function>
	 	<function name="getSoundLength" ret="int">
	 		 	<param name="element theSound" type="required" />
	 		 	<description>This function is used to return the playback length of the specified sound element.</description>
	 	</function>
	 	<function name="getSoundMaxDistance" ret="int">
	 		 	<param name="element sound" type="required" />
	 		 	<description>Gets a custom sound max distance at which the sound stops.</description>
	 	</function>
	 	<function name="getSoundMinDistance" ret="int">
	 		 	<param name="element sound" type="required" />
	 		 	<description>Gets a custom sound Minimum distance at which the sound stops getting louder.</description>
	 	</function>
	 	<function name="getSoundPosition" ret="int">
	 		 	<param name="element theSound" type="required" />
	 		 	<description>This function is used to return the current seek position of the specified sound element.</description>
	 	</function>
	 	<function name="getSoundVolume" ret="float">
	 		 	<param name="element theSound" type="required" />
	 		 	<description>This function is used to return the volume level of the specified sound element.</description>
	 	</function>
	 	<function name="isSoundPaused" ret="bool">
	 		 	<param name="element theSound" type="required" />
	 		 	<description>This function is used to return the current pause state of the specified sound element.</description>
	 	</function>
	 	<function name="playSound" ret="element">
	 		 	<param name="string soundPath" type="required" />
	 		 	<param name="bool looped" type="optional" />
	 		 	<description>Creates a sound element and plays it immediately after creation for the local player. Supported audio formats are MP3, WAV, OGG, RIFF, MOD, XM, IT and S3M.</description>
	 	</function>
	 	<function name="playSound3D" ret="element">
	 		 	<param name="string soundPath" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="bool looped" type="optional" />
	 		 	<description>Creates a sound element in the GTA world and plays it immediately after creation for the local player. setElementPosition can be used to move the sound element around after it has been created. Supported audio formats are MP3, WAV, OGG, RIFF, MOD, XM, IT and S3M.</description>
	 	</function>
	 	<function name="setRadioChannel" ret="bool">
	 		 	<param name="int ID" type="required" />
	 		 	<description>This function sets the currently active radio channel.</description>
	 	</function>
	 	<function name="setSoundMaxDistance" ret="bool">
	 		 	<param name="element sound" type="required" />
	 		 	<param name="int distance" type="required" />
	 		 	<description>Sets a custom sound max distance at which the sound stops.</description>
	 	</function>
	 	<function name="setSoundMinDistance" ret="bool">
	 		 	<param name="element sound" type="required" />
	 		 	<param name="int distance" type="required" />
	 		 	<description>Sets a custom sound Minimum distance at which the sound stops getting louder.</description>
	 	</function>
	 	<function name="setSoundPaused" ret="bool">
	 		 	<param name="element theSound" type="required" />
	 		 	<param name="bool paused" type="required" />
	 		 	<description>This function is used to either pause or unpause the playback of the specified sound element.</description>
	 	</function>
	 	<function name="setSoundPosition" ret="bool">
	 		 	<param name="element theSound" type="required" />
	 		 	<param name="int pos" type="required" />
	 		 	<description>This function is used to change the seek position of the specified sound element.</description>
	 	</function>
	 	<function name="setSoundVolume" ret="bool">
	 		 	<param name="element theSound" type="required" />
	 		 	<param name="float volume" type="required" />
	 		 	<description>This function is used to change the volume level of the specified sound element.</description>
	 	</function>
	 	<function name="stopSound" ret="bool">
	 		 	<param name="element theSound" type="required" />
	 		 	<description>Stops the sound playback for specified sound element.</description>
	 	</function>
	</group>
	<group name="Blip functions">
	 	<function name="createBlip" ret="blip">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="int icon=0" type="optional" />
	 		 	<param name="int size=2" type="optional" />
	 		 	<param name="int r=255" type="optional" />
	 		 	<param name="int g=0" type="optional" />
	 		 	<param name="int b=0" type="optional" />
	 		 	<param name="int a=255" type="optional" />
	 		 	<param name="int ordering=0 *" type="optional" />
	 		 	<param name="float visibleDistance=99999.0" type="optional" />
	 		 	<description>This function creates a blip element, which is displayed as an icon on the client's radar.</description>
	 	</function>
	 	<function name="createBlipAttachedTo" ret="blip">
	 		 	<param name="element elementToAttachTo" type="required" />
	 		 	<param name="int icon=0" type="optional" />
	 		 	<param name="int size=2" type="optional" />
	 		 	<param name="int r=255" type="optional" />
	 		 	<param name="int g=0" type="optional" />
	 		 	<param name="int b=0" type="optional" />
	 		 	<param name="int a=255" type="optional" />
	 		 	<param name="int ordering=0" type="optional" />
	 		 	<param name="float visibleDistance=99999.0" type="optional" />
	 		 	<description>This function creates a blip that is attached to an element. This blip is displayed as an icon on the client's radar and will 'follow' the element that it is attached to around.</description>
	 	</function>
	 	<function name="getBlipColor" ret="int, int, int, int">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<description>This function will tell you what color a blip is. This color is only applicable to the default blip icon. All other icons will ignore this.</description>
	 	</function>
	 	<function name="getBlipIcon" ret="int">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<description>This function returns the icon a blip currently has.</description>
	 	</function>
	 	<function name="getBlipSize" ret="int">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<description>This function gets the size of a blip.</description>
	 	</function>
	 	<function name="setBlipColor" ret="bool">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<param name="int red" type="required" />
	 		 	<param name="int green" type="required" />
	 		 	<param name="int blue" type="required" />
	 		 	<param name="int alpha" type="required" />
	 		 	<description>This function will let you change the color of a blip. This color is only applicable to the default blip icon. All other icons will ignore this.</description>
	 	</function>
	 	<function name="setBlipIcon" ret="bool">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<param name="int icon" type="required" />
	 		 	<description>This function sets the icon for an existing blip element.</description>
	 	</function>
	 	<function name="setBlipSize" ret="bool">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<param name="int iconSize" type="required" />
	 		 	<description>This function sets the size of a blip's icon.</description>
	 	</function>
	 	<function name="getBlipOrdering" ret="int">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<description>This function gets the Z ordering value of a blip. The Z ordering determines if a blip appears on top of or below other blips. Blips with a higher Z ordering value appear on top of blips with a lower value. The default value for all blips is 0.</description>
	 	</function>
	 	<function name="setBlipOrdering" ret="bool">
	 		 	<param name="blip theBlip" type="required" />
	 		 	<param name="int ordering" type="required" />
	 		 	<description>This function sets the Z ordering of a blip. It allows you to make a blip appear on top of or below other blips.</description>
	 	</function>
	</group>
	<group name="Camera functions">
	 	<function name="fadeCamera" ret="bool">
	 		 	<param name="bool fadeIn" type="required" />
	 		 	<param name="float timeToFade=1.0" type="optional" />
	 		 	<param name="int red=0" type="optional" />
	 		 	<param name="int green=0" type="optional" />
	 		 	<param name="int blue=0" type="optional" />
	 		 	<description>This function will fade the local player's camera to a color or back to normal over a specified time period. This will also affect the sound volume for the player (50% faded=50% volume, full fade=no sound). For clientside scripts you can perform 2 fade ins or fade outs in a row, but for serverside scripts you must use one then the other.</description>
	 	</function>
	 	<function name="getCameraTarget" ret="element">
	 		 	<description>This function returns an element that corresponds to the current target of the specified player's camera (i.e. what it is following).</description>
	 	</function>
	 	<function name="setCameraTarget" ret="bool">
	 		 	<param name="element target" type="required" />
	 		 	<description>This function allows you to set the local player's camera to follow other elements instead.</description>
	 	</function>
	 	<function name="getCameraInterior" ret="int">
	 		 	<description>Returns the interior of the local camera (independent of the interior of the local player).</description>
	 	</function>
	 	<function name="getCameraMatrix" ret="float, float, float, float, float, float, float, float">
	 		 	<description>This function gets the position of the camera and the position of the point it is facing.</description>
	 	</function>
	 	<function name="setCameraInterior" ret="bool">
	 		 	<param name="int, interior" type="required" />
	 		 	<description>Sets the interior of the local camera. Only the interior of the camera is changed, the local player stays in the interior he was in.</description>
	 	</function>
	 	<function name="setCameraMatrix" ret="bool">
	 		 	<param name="float positionX" type="required" />
	 		 	<param name="float positionY" type="required" />
	 		 	<param name="float positionZ" type="required" />
	 		 	<param name="float lookAtX" type="optional" />
	 		 	<param name="float lookAtY" type="optional" />
	 		 	<param name="float lookAtZ" type="optional" />
	 		 	<param name="float roll=0" type="optional" />
	 		 	<param name="float fov=70" type="optional" />
	 		 	<description>This function sets the camera's position and direction. The first three arguments are the point at which the camera lies, the last three are the point the camera faces (or the point it "looks at").</description>
	 	</function>
	</group>
	<group name="Clothes and body functions">
	 	<function name="addPedClothes" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string clothesTexture" type="required" />
	 		 	<param name="string clothesModel" type="required" />
	 		 	<param name="int clothesType" type="required" />
	 		 	<description>This function is used to set the current clothes of a certain type on a ped. It can only be used on peds with the CJ skin (id 0).</description>
	 	</function>
	 	<function name="getBodyPartName" ret="string">
	 		 	<param name="int bodyPartID" type="required" />
	 		 	<description>This function is used to get the name of a body part on a player.</description>
	 	</function>
	 	<function name="getClothesByTypeIndex" ret="string, string">
	 		 	<param name="int clothesType" type="required" />
	 		 	<param name="int clothesIndex" type="required" />
	 		 	<description>This function is used to get the texture and model of clothes by the clothes type and index.</description>
	 	</function>
	 	<function name="getClothesTypeName" ret="string">
	 		 	<param name="int clothesType" type="required" />
	 		 	<description>This function is used to get the name of a certain clothes type.</description>
	 	</function>
	 	<function name="getPedClothes" ret="string, string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int clothesType" type="required" />
	 		 	<description>This function is used to get the current clothes texture and model of a certain type on a ped.</description>
	 	</function>
	 	<function name="getTypeIndexFromClothes" ret="int, int">
	 		 	<param name="string clothesTexture" type="required" />
	 		 	<param name="string clothesModel" type="required" />
	 		 	<description>This function is used to get the clothes type and index from the texture and model.</description>
	 	</function>
	 	<function name="removePedClothes" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int clothesType" type="required" />
	 		 	<param name="string clothesTexture" type="optional" />
	 		 	<param name="string clothesModel" type="optional" />
	 		 	<description>This function is used to remove the current clothes of a certain type on a ped. It will remove them if the clothesTexture and clothesModel aren't specified, or if they match the current clothes on that slot.</description>
	 	</function>
	</group>
	<group name="Collision shape functions">
	 	<function name="createColCircle" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float radius" type="required" />
	 		 	<description>This function creates a collision circle. This is a shape that has a position and a radius and infinite height that you can use to detect a player's presence. Events will be triggered when a player enters or leaves it.</description>
	 	</function>
	 	<function name="createColCuboid" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float fZ" type="required" />
	 		 	<param name="float fWidth" type="required" />
	 		 	<param name="float fDepth" type="required" />
	 		 	<param name="float fHeight" type="required" />
	 		 	<description>This function creates a collision cuboid. This is a shape that has a position, width, depth and height. See Wikipedia for a definition of a cuboid. The XYZ of the col starts at the southwest bottom corner of the shape.</description>
	 	</function>
	 	<function name="createColRectangle" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float fWidth" type="required" />
	 		 	<param name="float fDepth" type="required" />
	 		 	<description>This function creates a collision rectangle. This is a shape that has a position and a width and a depth. See Rectangle for a definition of a rectangle. XY marks on the south west corner of the colshape.</description>
	 	</function>
	 	<function name="createColSphere" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float fZ" type="required" />
	 		 	<param name="float fRadius" type="required" />
	 		 	<description>This function creates a collision sphere. This is a shape that has a position and a radius. See Wikipedia for a definition of a sphere.</description>
	 	</function>
	 	<function name="createColTube" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float fZ" type="required" />
	 		 	<param name="float fRadius" type="required" />
	 		 	<param name="float fHeight" type="required" />
	 		 	<description>This function creates a collision tube. This is a shape that has a position and a 2D (X/Y) radius and a height. See Tube for a definition of a tube. A tube is similar to a colcircle, except that it has a limited height, this means you can limit the distance above the position defined by (fX, fY, fZ) that the collision is detected.</description>
	 	</function>
	 	<function name="createColPolygon" ret="colshape">
	 		 	<param name="float fX" type="required" />
	 		 	<param name="float fY" type="required" />
	 		 	<param name="float fX1" type="required" />
	 		 	<param name="float fY1" type="required" />
	 		 	<param name="float fX2" type="required" />
	 		 	<param name="float fY2" type="required" />
	 		 	<param name="float fX3" type="required" />
	 		 	<param name="float fY3" type="required" />
	 		 	<param name="..." type="required" />
	 		 	<description>This function creates a collision polygon. See Wikipedia for a definition of a polygon. The first set of X Y of this shape is not part of the colshape bounds, so can set anywhere in the game world, however for performance, place it somewhere within the polygon. It should be noted this shape is 2D. There should be at least 3 bound points set.</description>
	 	</function>
	</group>
	<group name="Cursor functions">
	 	<function name="getCursorPosition" ret="float, float, float, float, float">
	 		 	<description>This function gets the current position of the mouse cursor.</description>
	 	</function>
	 	<function name="isCursorShowing" ret="bool">
	 		 	<description>This function is used to determine whether or not the local player's cursor is showing.</description>
	 	</function>
	 	<function name="showCursor" ret="bool">
	 		 	<param name="bool show" type="required" />
	 		 	<param name="bool toggleControls=true" type="optional" />
	 		 	<description>This function is used to show or hide the local player's cursor.</description>
	 	</function>
	</group>
	<group name="Drawing functions">
	 	<function name="dxDrawImage" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string filepath" type="required" />
	 		 	<param name="float rotation=0" type="optional" />
	 		 	<param name="float rotationCenterOffsetX=0" type="optional" />
	 		 	<param name="float rotationCenterOffsetY=0" type="optional" />
	 		 	<param name="int color=white" type="optional" />
	 		 	<param name="bool postGUI=false" type="optional" />
	 		 	<description>Draws an image on the screen for a single frame. In order for the image to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).</description>
	 	</function>
	 	<function name="dxDrawLine" ret="bool">
	 		 	<param name="int startX" type="required" />
	 		 	<param name="int startY" type="required" />
	 		 	<param name="int endX" type="required" />
	 		 	<param name="int endY" type="required" />
	 		 	<param name="int color" type="required" />
	 		 	<param name="float width=1" type="optional" />
	 		 	<param name="bool postGUI=false" type="optional" />
	 		 	<description>This function draws a 2D line across the screen - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.</description>
	 	</function>
	 	<function name="dxDrawLine3D" ret="bool">
	 		 	<param name="float startX" type="required" />
	 		 	<param name="float startY" type="required" />
	 		 	<param name="float startZ" type="required" />
	 		 	<param name="float endX" type="required" />
	 		 	<param name="float endY" type="required" />
	 		 	<param name="float endZ" type="required" />
	 		 	<param name="int color" type="required" />
	 		 	<param name="int width" type="optional" />
	 		 	<param name="bool postGUI" type="optional" />
	 		 	<param name="float zBuffer" type="optional" />
	 		 	<description>This function draws a 3D line between two points in the 3D world - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.</description>
	 	</function>
	 	<function name="dxDrawRectangle" ret="bool">
	 		 	<param name="int startX" type="required" />
	 		 	<param name="startY" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="int color=white" type="optional" />
	 		 	<param name="bool postGUI=false" type="optional" />
	 		 	<description>This function draws a 2D rectangle across the screen - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.</description>
	 	</function>
	 	<function name="dxDrawText" ret="bool">
	 		 	<param name="string text" type="required" />
	 		 	<param name="int left" type="required" />
	 		 	<param name="int top" type="required" />
	 		 	<param name="int right=left" type="optional" />
	 		 	<param name="int bottom=top" type="optional" />
	 		 	<param name="int color=white" type="optional" />
	 		 	<param name="float scale=1" type="optional" />
	 		 	<param name="string font=default" type="optional" />
	 		 	<param name="string alignX=left" type="optional" />
	 		 	<param name="string alignY=top" type="optional" />
	 		 	<param name="bool clip=false" type="optional" />
	 		 	<param name="bool wordBreak=false" type="optional" />
	 		 	<param name="bool postGUI" type="optional" />
	 		 	<description>Draws a string of text on the screen for one frame. In order for the text to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).</description>
	 	</function>
	 	<function name="dxGetFontHeight" ret="int">
	 		 	<param name="float scale=1" type="optional" />
	 		 	<param name="string font=default" type="optional" />
	 		 	<description>This function retrieves the theoretical height of a certain piece of text, if it were to be drawn using dxDrawText.</description>
	 	</function>
	 	<function name="dxGetTextWidth" ret="float">
	 		 	<param name="string text" type="required" />
	 		 	<param name="float scale=1" type="optional" />
	 		 	<param name="string font=default" type="optional" />
	 		 	<description>This function retrieves the theoretical width of a certain piece of text, if it were to be drawn using dxDrawText.</description>
	 	</function>
	</group>
	<group name="Effects functions">
	 	<function name="fxAddBlood" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<param name="int count=1" type="optional" />
	 		 	<param name="float brightness=1.0" type="optional" />
	 		 	<description>Creates a blood splatter particle effect.</description>
	 	</function>
	 	<function name="fxAddBulletImpact" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<param name="int smokeSize=1" type="optional" />
	 		 	<param name="int sparkCount=1" type="optional" />
	 		 	<param name="float smokeIntensity=1.0" type="optional" />
	 		 	<description>Creates a bullet impact particle effect, consisting of a small smoke cloud and a number of sparks.</description>
	 	</function>
	 	<function name="fxAddBulletSplash" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<description>This function creates a bullet splash particle effect, normally created when shooting into water.</description>
	 	</function>
	 	<function name="fxAddDebris" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="int colorR=255" type="optional" />
	 		 	<param name="int colorG=0" type="optional" />
	 		 	<param name="int colorB=0" type="optional" />
	 		 	<param name="int colorA=255" type="optional" />
	 		 	<param name="float scale=1.0" type="optional" />
	 		 	<param name="int count=1" type="optional" />
	 		 	<description>Creates a debris particle effect (e.g. bits that fly off a car when ramming a wall).</description>
	 	</function>
	 	<function name="fxAddFootSplash" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<description>This function creates a foot splash particle effect, normally created when walking into water.</description>
	 	</function>
	 	<function name="fxAddGlass" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="int colorR=255" type="optional" />
	 		 	<param name="int colorG=0" type="optional" />
	 		 	<param name="int colorB=0" type="optional" />
	 		 	<param name="int colorA=255" type="optional" />
	 		 	<param name="float scale=1.0" type="optional" />
	 		 	<param name="int count=1" type="optional" />
	 		 	<description>This function creates a glass particle effect.</description>
	 	</function>
	 	<function name="fxAddGunshot" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<param name="bool includeSparks=true" type="optional" />
	 		 	<description>This function creates a gunshot particle effect.</description>
	 	</function>
	 	<function name="fxAddPunchImpact" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<description>Creates a punch impact particle effect (a small dust cloud).</description>
	 	</function>
	 	<function name="fxAddSparks" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<param name="float force=1" type="optional" />
	 		 	<param name="int count=1" type="optional" />
	 		 	<param name="float acrossLineX=0" type="optional" />
	 		 	<param name="float acrossLineY=0" type="optional" />
	 		 	<param name="float acrossLineZ=0" type="optional" />
	 		 	<param name="bool blur=false" type="optional" />
	 		 	<param name="float spread=1" type="optional" />
	 		 	<param name="float life=1" type="optional" />
	 		 	<description>Creates a number of sparks originating from a point or along a line.</description>
	 	</function>
	 	<function name="fxAddTankFire" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<description>This function creates a tank firing particle effect.</description>
	 	</function>
	 	<function name="fxAddTyreBurst" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<description>Creates a tyre burst particle effect (a small white smoke puff).</description>
	 	</function>
	 	<function name="fxAddWaterHydrant" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<description>This function creates a water hydrant particle effect.</description>
	 	</function>
	 	<function name="fxAddWaterSplash" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<description>This function creates a water splash particle effect.</description>
	 	</function>
	 	<function name="fxAddWood" ret="bool">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<param name="float dirX" type="required" />
	 		 	<param name="float dirY" type="required" />
	 		 	<param name="float dirZ" type="required" />
	 		 	<param name="int count=1" type="optional" />
	 		 	<param name="float brightness=1.0" type="optional" />
	 		 	<description>Creates a wood splinter particle effect.</description>
	 	</function>
	</group>
	<group name="Element functions">
	 	<function name="createElement" ret="element">
	 		 	<param name="string elementType" type="required" />
	 		 	<param name="string elementID" type="optional" />
	 		 	<description>This function is used to create a new dummy element in the element tree which do not necessarily represent an entity within the San Andreas world. A common use for this function is for creating custom elements, such as a Flag or a Base.</description>
	 	</function>
	 	<function name="destroyElement" ret="bool">
	 		 	<param name="element elementToDestroy" type="required" />
	 		 	<description>This function destroys an element and all elements withinn it in the hierarchy (its children, the children of those children etc). Player elements cannot be destroyed using this function. A player can only be removed from the hierarchy when they quit or are kicked. The root element also cannot be destroyed, however, passing the root as an argument will wipe all elements from the server, except for the players and clients, which will become direct descendants of the root node, and other elements that cannot be destroyed, such as resource root elements.</description>
	 	</function>
	 	<function name="getAttachedElements" ret="table">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function returns a table of all the elements attached to the specified element</description>
	 	</function>
	 	<function name="getElementAttachedTo" ret="element">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function determines the element that the specified element is attached to.</description>
	 	</function>
	 	<function name="getElementBoundingBox" ret="float, float, float, float, float, float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function returns the minimum and maximum coordinates of an element's bounding box.</description>
	 	</function>
	 	<function name="getElementByID" ret="element">
	 		 	<param name="string id" type="required" />
	 		 	<description>This function returns an element from the specified ID. If more than one element with the same ID exists, only the first one in the order it appears in the XML tree will be returned by this function.</description>
	 	</function>
	 	<function name="getElementChild" ret="element">
	 		 	<param name="element parent" type="required" />
	 		 	<param name="int index" type="required" />
	 		 	<description>This function returns one of the child elements of a given parent element. The child element is selected by its index (0 for the first child, 1 for the second and so on).</description>
	 	</function>
	 	<function name="getElementChildren" ret="table">
	 		 	<param name="element parent" type="required" />
	 		 	<description>This function is used to retrieve a list of the child elements of a given parent element.</description>
	 	</function>
	 	<function name="getElementChildrenCount" ret="int">
	 		 	<param name="element parent" type="required" />
	 		 	<description>This function returns the number of children an element has.</description>
	 	</function>
	 	<function name="getElementData" ret="var">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="string key" type="required" />
	 		 	<param name="inherit=true" type="optional" />
	 		 	<description>This function retrieves element data attached to an element under a certain key.</description>
	 	</function>
	 	<function name="getElementDimension" ret="int">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function allows you to retrieve the dimension of any element. The dimension determines what/who the element is visible to.</description>
	 	</function>
	 	<function name="getElementDistanceFromCentreOfMassToBaseOfModel" ret="float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function is used to retrieve the distance between a element's centre of mass to the base of the model. This can be used to calculate the position the element has to be set to, to have it on ground level.</description>
	 	</function>
	 	<function name="getElementHealth" ret="float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function returns the current health for the specified element. This can be a player or a vehicle.</description>
	 	</function>
	 	<function name="getElementID" ret="string">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function gets the ID of an element. This is the "id" attribute of the element and is a string, NOT a number like a model ID, weapons ID or similar.</description>
	 	</function>
	 	<function name="getElementInterior" ret="int">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function allows you to retrieve the interior of any element. An interior is the current loaded place, 0 being outside.</description>
	 	</function>
	 	<function name="getElementParent" ret="element">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function is used to determine the parent of an element.</description>
	 	</function>
	 	<function name="getElementPosition" ret="float, float, float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>The getElementPosition function allows you to retrieve the position coordinates of an element. This can be any real world element, including:</description>
	 	</function>
	 	<function name="getElementRadius" ret="float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function gets the radius from a element.</description>
	 	</function>
	 	<function name="getElementsByType" ret="table">
	 		 	<param name="string type" type="required" />
	 		 	<param name="element startat=getRootElement()" type="optional" />
	 		 	<description>This function is used to retrieve a list of all elements of the specified type. This can be useful, as it disregards where in the element tree it is. It can be used with either the built in types (listed below) or with any custom type used in a .map file. For example, if there is an element of type "flag" (e.g. &lt;flag /&gt;) in the .map file, the using "flag" as the type argument would find it.</description>
	 	</function>
	 	<function name="getElementsWithinColShape" ret="table">
	 		 	<param name="colshape shape" type="required" />
	 		 	<param name="string elemType" type="optional" />
	 		 	<description>This function is used to retrieve a list of all elements in a colshape, of the specified type.</description>
	 	</function>
	 	<function name="getElementType" ret="string">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function is used to retrieve the type of an element.</description>
	 	</function>
	 	<function name="getElementVelocity" ret="float, float, float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function returns three floats containing the velocity (movement speeds) along the X, Y, and Z axis respectively. This means that velocity values can be positive and negative for each axis.</description>
	 	</function>
	 	<function name="getRootElement" ret="element">
	 		 	<description>This function returns the root node of the element tree, called root. This node contains every other element: all resource root elements, players and remote clients. It is never destroyed and cannot be destroyed using destroyElement.</description>
	 	</function>
	 	<function name="isElement" ret="bool">
	 		 	<param name="var theValue" type="required" />
	 		 	<description>This function checks if a value is an element or not.</description>
	 	</function>
	 	<function name="isElementAttached" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This functions checks whether or not an element is attached to another element.</description>
	 	</function>
	 	<function name="isElementLocal" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks whether a clientside element is local to the client (doesn't exist in the server) or not.</description>
	 	</function>
	 	<function name="isElementOnScreen" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks wether an element is on the screen.</description>
	 	</function>
	 	<function name="isElementStreamable" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks whether an element is streamable as set by setElementStreamable or not.</description>
	 	</function>
	 	<function name="isElementStreamedIn" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks whether an element is currently streamed in (not virtualized) and are actual GTA objects in the world. You can force an element to be streamed in using setElementStreamable.</description>
	 	</function>
	 	<function name="isElementWithinColShape" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="colshape theShape" type="required" />
	 		 	<description>This function is used to determine if an element is within a collision shape.</description>
	 	</function>
	 	<function name="setElementAlpha" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int alpha" type="required" />
	 		 	<description>This function sets the alpha(transparency) value for the specified element. This can be a player or a vehicle.</description>
	 	</function>
	 	<function name="setElementCollisionsEnabled" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>This function can disable or enable an element's collisions. An element without collisions does not interact with the physical environment and remains static.</description>
	 	</function>
	 	<function name="setElementData" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="string key" type="required" />
	 		 	<param name="var value" type="optional" />
	 		 	<param name="bool synchronize" type="optional" />
	 		 	<description>This function stores element data under a certain key, attached to an element. Element data set using this is then synced with all clients or the server (depending if used client-side or not). As such you should avoid passing data that is not able to be synced into this function (i.e. xmlnodes, acls, aclgroups etc.) Server-created elements are able to be synced.</description>
	 	</function>
	 	<function name="setElementDimension" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int dimension" type="required" />
	 		 	<description>This function allows you to set the dimension of any element. The dimension determines what/who the element is visible to.</description>
	 	</function>
	 	<function name="setElementHealth" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="float newHealth" type="required" />
	 		 	<description>This function sets the health for the specified element. This can be a player or a vehicle.</description>
	 	</function>
	 	<function name="setElementInterior" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int, interior" type="required" />
	 		 	<param name="float x" type="optional" />
	 		 	<param name="float y" type="optional" />
	 		 	<param name="float z" type="optional" />
	 		 	<description>This function allows you to set the interior of any element. An interior is the current loaded place, 0 being outside.</description>
	 	</function>
	 	<function name="setElementParent" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="element parent" type="required" />
	 		 	<description>This function is used for setting an element as the parent of another element.</description>
	 	</function>
	 	<function name="setElementPosition" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="bool warp=true" type="optional" />
	 		 	<description>This function sets the position of an element to the specified coordinates.</description>
	 	</function>
	 	<function name="setElementStreamable" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool streamable" type="required" />
	 		 	<description>This function can be used to disable streaming for an element. This will make sure the element is not virtualized (streamed out from GTA) when the player moves far away from it. If the limit for that element type is reached, the furthest away elements that are streamable will be streamed out until it's below the limit.</description>
	 	</function>
	 	<function name="setElementVelocity" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="float speedX" type="required" />
	 		 	<param name="float speedY" type="required" />
	 		 	<param name="float speedZ" type="required" />
	 		 	<description>This function sets the velocity (movement speeds) along each axis, for an element.</description>
	 	</function>
	 	<function name="attachElements" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="element theAttachToElement" type="required" />
	 		 	<param name="float xPosOffset" type="optional" />
	 		 	<param name="float yPosOffset" type="optional" />
	 		 	<param name="float zPosOffset" type="optional" />
	 		 	<param name="float xRotOffset" type="optional" />
	 		 	<param name="float yRotOffset" type="optional" />
	 		 	<param name="float zRotOffset" type="optional" />
	 		 	<description>This function attaches one element to another, so that the first one follows the second whenever it moves.</description>
	 	</function>
	 	<function name="detachElements" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="element theAttachToElement" type="optional" />
	 		 	<description>This function detaches attached elements from one another.</description>
	 	</function>
	 	<function name="getElementColShape" ret="colshape">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function is used to get element's colshape.</description>
	 	</function>
	 	<function name="getElementMatrix" ret="table">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function gets an element's transform matrix. This contains 16 float values that multiplied to a point will give you the point transformed. It is most useful for matrix calculations such as calculating offsets. For further information, please refer to a tutorial of matrices in computer graphics programming.</description>
	 	</function>
	 	<function name="getElementModel" ret="int">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>Returns the model ID of a given element. This can be a player/ped skin, a pickup model, an object model or a vehicle model.</description>
	 	</function>
	 	<function name="getElementRotation" ret="float, float, float">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>Retrieve the rotation of elements.</description>
	 	</function>
	 	<function name="isElementInWater" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks whether an element is submerged in water.</description>
	 	</function>
	 	<function name="isElementSyncer" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<description>This function checks whether an element is a syncer or not. Accepted elements are ped's and vehicle's.</description>
	 	</function>
	 	<function name="setElementModel" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int model" type="required" />
	 		 	<description>Sets the model of a given element. This allows you to change the model of a player (or ped), a vehicle or an object.</description>
	 	</function>
	 	<function name="setElementRotation" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="float rotX" type="required" />
	 		 	<param name="float rotY" type="required" />
	 		 	<param name="float rotZ" type="required" />
	 		 	<description>Sets the rotation of elements according to the world (does not work with players that are on the ground).</description>
	 	</function>
	</group>
	<group name="Engine functions">
	 	<function name="engineImportCOL" ret="bool">
	 		 	<param name="col" type="required" />
	 		 	<param name="int model_id" type="required" />
	 		 	<description>This function imports a RenderWare Collision into the model identified by the model id. This function does not replace the collisions of all models of this type in-game.</description>
	 	</function>
	 	<function name="engineImportTXD" ret="bool">
	 		 	<param name="txd texture" type="required" />
	 		 	<param name="int model_id" type="required" />
	 		 	<description>This function imports (adds) a loaded RenderWare Texture Dictionary into a specific model. This is necessary in order for the DFF loader to find any new textures. Please call this function before loading the DFF model file, in order to allow the DFF loading process to find the new textures.</description>
	 	</function>
	 	<function name="engineLoadCOL" ret="col">
	 		 	<param name="string col_file" type="required" />
	 		 	<description>This function loads a RenderWare Collision (COL 1/2/3) file into GTA. The collisions can then be used to provide collisions for in-game objects.</description>
	 	</function>
	 	<function name="engineLoadDFF" ret="dff">
	 		 	<param name="string dff_file" type="required" />
	 		 	<param name="int model_id" type="required" />
	 		 	<description>This function loads a RenderWare Model (DFF) file into GTA.</description>
	 	</function>
	 	<function name="engineLoadTXD" ret="txd">
	 		 	<param name="string txd_file" type="required" />
	 		 	<description>This function loads a RenderWare Texture Dictionary (TXD) file into GTA. The texture dictionary can then be used to provide textures.</description>
	 	</function>
	 	<function name="engineReplaceCOL" ret="bool">
	 		 	<param name="col theCol" type="required" />
	 		 	<param name="int modelID" type="required" />
	 		 	<description>This function replaces the collision file of the given model id to the collision file passed. Use engineLoadCOL to load the collision file first.</description>
	 	</function>
	 	<function name="engineReplaceModel" ret="bool">
	 		 	<param name="dff theModel" type="required" />
	 		 	<param name="int modelID" type="required" />
	 		 	<description>This function replaces the given model in the given model ID with the DFF file passed. This function supports vehicles and objects at the moment.</description>
	 	</function>
	 	<function name="engineRestoreCOL" ret="bool">
	 		 	<param name="int modelID" type="required" />
	 		 	<description>This function restores the original collision model of the given model ID. Reverses the effect of engineReplaceCOL.</description>
	 	</function>
	 	<function name="engineRestoreModel" ret="bool">
	 		 	<param name="int modelID" type="required" />
	 		 	<description>This function restores the visual DFF model of the given model ID. This restores the result of engineReplaceModel.</description>
	 	</function>
	 	<function name="engineSetModelLODDistance" ret="bool">
	 		 	<param name="int model" type="required" />
	 		 	<param name="float distance" type="required" />
	 		 	<description>This function sets a custom LOD distance for any object / model ID. LOD distance is basically the same as draw distance. Objects with high LOD value can be seen from great distances.</description>
	 	</function>
	</group>
	<group name="Event functions">
	 	<function name="addEvent" ret="bool">
	 		 	<param name="string eventName" type="required" />
	 		 	<param name="bool allowRemoteTrigger=false" type="optional" />
	 		 	<description>This function allows you to register a custom event. Custom events function exactly like the built-in events. See event system for more information on the event system.</description>
	 	</function>
	 	<function name="addEventHandler" ret="bool">
	 		 	<param name="string eventName" type="required" />
	 		 	<param name="element attachedTo" type="required" />
	 		 	<param name="function handlerFunction" type="required" />
	 		 	<param name="bool getPropagated=true" type="optional" />
	 		 	<description>This function will add an event handler. An event handler is a function that will be called when the event it's attached to is triggered. See event system for more information on how the event system works.</description>
	 	</function>
	 	<function name="cancelEvent" ret="bool">
	 		 	<param name="bool cancel" type="optional" />
	 		 	<param name="string reason" type="optional" />
	 		 	<description>This function is used to stop the automatic internal handling of events, for example this can be used to prevent an item being given to a player when they walk over a pickup, by canceling the onPickupUse event.</description>
	 	</function>
	 	<function name="removeEventHandler" ret="bool">
	 		 	<param name="string eventName" type="required" />
	 		 	<param name="element attachedTo" type="required" />
	 		 	<param name="function functionVar" type="required" />
	 		 	<description>This functions removes a handler function from an event, so that the function is not called anymore when the event is triggered. See event system for more information on how the event system works.</description>
	 	</function>
	 	<function name="triggerEvent" ret="bool">
	 		 	<param name="string eventName" type="required" />
	 		 	<param name="element baseElement" type="required" />
	 		 	<param name="var argument1" type="optional" />
	 		 	<param name="..." type="optional" />
	 		 	<description>This function will trigger a named event on a specific element in the element tree. See event system for more information on how the event system works.</description>
	 	</function>
	 	<function name="triggerServerEvent" ret="bool">
	 		 	<param name="string event" type="required" />
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="arguments..." type="optional" />
	 		 	<description>This function triggers an event previously registered on the server. This is the primary means of passing information between the client and the server. Servers have a similar triggerClientEvent function that can do the reverse. You can treat this function as if it was an asynchronous function call, using triggerClientEvent to pass back any returned information if necessary.</description>
	 	</function>
	 	<function name="wasEventCanceled" ret="bool">
	 		 	<description>This function checks whether or not the currently active event has been canceled. This is mainly useful for custom events created by scripts.</description>
	 	</function>
	</group>
	<group name="Explosion functions">
	 	<function name="createExplosion" ret="bool">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="int type" type="required" />
	 		 	<param name="bool makesound=true" type="optional" />
	 		 	<param name="float camshake=-1.0" type="optional" />
	 		 	<param name="bool damaging=true" type="optional" />
	 		 	<description>Creates an explosion of a certain type at a specified point in the world.</description>
	 	</function>
	</group>
	<group name="Fire functions">
	 	<function name="createFire" ret="bool">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="float size=1.8" type="optional" />
	 		 	<description>Creates a patch of fire that will spread a bit and die out after a while.</description>
	 	</function>
	</group>
	<group name="GUI functions">
	 	<function name="guiBringToFront" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function brings a GUI element on top of others.</description>
	 	</function>
	 	<function name="guiGetAlpha" ret="int">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>Alpha represents the transparency of a gui element. This function allows retrieval of a gui element's current alpha.</description>
	 	</function>
	 	<function name="guiGetEnabled" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function determines if a GUI element is enabled.</description>
	 	</function>
	 	<function name="guiGetFont" ret="string">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function is used to get the current font that is used to draw text in GUI elements.</description>
	 	</function>
	 	<function name="guiGetInputEnabled" ret="bool">
	 		 	<description>This function checks whether user input is focused on the GUI or the game.</description>
	 	</function>
	 	<function name="guiGetPosition" ret="float, float">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<description>This function allows retrieval of a GUI element's current position, relative to its parent.</description>
	 	</function>
	 	<function name="guiGetProperties" ret="table">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function gets a list of the CEGUI property names and values of a GUI element. To find out what the different properties mean, check out the CEGUI properties wiki page.</description>
	 	</function>
	 	<function name="guiGetProperty" ret="string">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="string property" type="required" />
	 		 	<description>This function gets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the CEGUI properties wiki page.</description>
	 	</function>
	 	<function name="guiGetScreenSize" ret="float, float">
	 		 	<description>This function retrieves the local screen size according to the resolution they are using.</description>
	 	</function>
	 	<function name="guiGetSize" ret="float, float">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<description>This function gets the size of a GUI element.</description>
	 	</function>
	 	<function name="guiGetText" ret="string">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function is used to get the text of GUI elements like edit boxes, labels, buttons etc.</description>
	 	</function>
	 	<function name="guiGetVisible" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function determines if a GUI element is visible.</description>
	 	</function>
	 	<function name="guiMoveToBack" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<description>This function moves a GUI element to the very back of all other GUI elements.</description>
	 	</function>
	 	<function name="guiSetAlpha" ret="bool">
	 		 	<param name="element guielement" type="required" />
	 		 	<param name="float alpha" type="required" />
	 		 	<description>This changes the alpha level (the visibleness/transparency) of a GUI element</description>
	 	</function>
	 	<function name="guiSetEnabled" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>This function enables/disables a GUI element. A disabled GUI element can't be used, gets a gray aspect and doesn't receive any events.</description>
	 	</function>
	 	<function name="guiSetFont" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="string font" type="required" />
	 		 	<description>This function sets the font of a GUI element to be used when drawing text.</description>
	 	</function>
	 	<function name="guiSetInputEnabled" ret="bool">
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>This function enables or disables input focus for the GUI. This means that any keybinds or MTA binds are overidden so that text can be input into an editbox, for example. In other words, keys such as t and y which activate the chatbox are disabled.</description>
	 	</function>
	 	<function name="guiSetPosition" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<description>This function sets the position of a GUI element.</description>
	 	</function>
	 	<function name="guiSetProperty" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="string property" type="required" />
	 		 	<param name="string value" type="required" />
	 		 	<description>This function sets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the CEGUI properties wiki page.</description>
	 	</function>
	 	<function name="guiSetSize" ret="bool">
	 		 	<param name="element gui" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<description>This function sets the dimensions (size) of a GUI element</description>
	 	</function>
	 	<function name="guiSetText" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<description>This function sets the text of a GUI element.</description>
	 	</function>
	 	<function name="guiSetVisible" ret="bool">
	 		 	<param name="element guiElement" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>This function changes the visibility state of a GUI element.</description>
	 	</function>
	 	<function name="isChatBoxInputActive" ret="bool">
	 		 	<description>This function returns whether the ingame chatbox is being used (accepting chatbox input) or not.</description>
	 	</function>
	 	<function name="isConsoleActive" ret="bool">
	 		 	<description>This function returns whether the ingame console window is visible or not.</description>
	 	</function>
	 	<function name="isDebugViewActive" ret="bool">
	 		 	<description>This function returns whether the ingame debug window is visible or not. This is the debugwindow visible using the "debugscript &lt;level&gt;" command.</description>
	 	</function>
	 	<function name="isMainMenuActive" ret="bool">
	 		 	<description>This function returns whether the user is in the mainmenu or not.</description>
	 	</function>
	 	<function name="isMTAWindowActive" ret="bool">
	 		 	<description>This function returns whether the any system windows that take focus are active. This includes the chatbox input, console window, main menu and transferbox.</description>
	 	</function>
	 	<function name="isTransferBoxActive" ret="bool">
	 		 	<description>This function returns whether the transferbox is visible or not.</description>
	 	</function>
	</group>
	<group name="Buttons">
	 	<function name="guiCreateButton" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function allows creation of a GUI Button, which is a clickable item as part of GUI.</description>
	 	</function>
	</group>
	<group name="Checkboxes">
	 	<function name="guiCheckBoxGetSelected" ret="bool">
	 		 	<param name="element theCheckbox" type="required" />
	 		 	<description>This function gets a checkbox's selection state.</description>
	 	</function>
	 	<function name="guiCheckBoxSetSelected" ret="bool">
	 		 	<param name="element theCheckbox" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>This function selects (ticks) or unselects a checkbox.</description>
	 	</function>
	 	<function name="guiCreateCheckBox" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool selected" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a checkbox.</description>
	 	</function>
	 	<function name="guiCreateEdit" ret="gui-edit">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function is for creating a new GUI edit box. This is a text box in which the user can input text. Edit boxes only allow a single line of text. If you want to allow multiple lines of text create a memo box using guiCreateMemo.</description>
	 	</function>
	 	<function name="guiEditSetMasked" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool status" type="required" />
	 		 	<description>This function sets or removes masking (covering up the text being typed) for password text fields.</description>
	 	</function>
	 	<function name="guiEditSetMaxLength" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int length" type="required" />
	 		 	<description>This function sets the maximum text length that can be typed into an edit box.</description>
	 	</function>
	 	<function name="guiEditSetReadOnly" ret="bool">
	 		 	<param name="element editField" type="required" />
	 		 	<param name="bool status" type="required" />
	 		 	<description>This function allows you to set or remove read-only status for an edit box. If read-only is set to true, the box is not editable.</description>
	 	</function>
	 	<function name="guiEditSetCaretIndex" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int index" type="required" />
	 		 	<description>This function sets the current position of the caret (the text cursor) within the edit box.</description>
	 	</function>
	</group>
	<group name="Gridlists">
	 	<function name="guiCreateGridList" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a grid list GUI element. These are menu's which are designed in lists and can have multiple columns. A good example of a gridlist element can be found in MTA's settings box, under Controls.</description>
	 	</function>
	 	<function name="guiGridListAddColumn" ret="int">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="string title" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<description>This function is used to create columns in grid lists.</description>
	 	</function>
	 	<function name="guiGridListAddRow" ret="int">
	 		 	<param name="element gridList" type="required" />
	 		 	<description>Adds a row to a grid list.</description>
	 	</function>
	 	<function name="guiGridListAutoSizeColumn" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<description>This allows you to automatically size a column to display everything in it correctly, with the most minimal width.</description>
	 	</function>
	 	<function name="guiGridListClear" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<description>This function clears all the data from a grid list.</description>
	 	</function>
	 	<function name="guiGridListGetItemData" ret="string">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<description>With this function you can retrieve the string data associated with an item in a grid list. This is not the text that is displayed on the item, but an internal string that you can use to hold extra information about the item.</description>
	 	</function>
	 	<function name="guiGridListGetItemText" ret="string">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<description>This function retrieves the text from a specific grid list item.</description>
	 	</function>
	 	<function name="guiGridListGetRowCount" ret="int">
	 		 	<param name="element theList" type="required" />
	 		 	<description>This function returns the number of rows in a grid list.</description>
	 	</function>
	 	<function name="guiGridListGetSelectedItem" ret="int, int">
	 		 	<param name="element gridList" type="required" />
	 		 	<description>This function returns the row and colum indexes of the selected item in a grid list.</description>
	 	</function>
	 	<function name="guiGridListInsertRowAfter" ret="int">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<description>This allows you to insert a new row after a specified row. Good for inserting new rows in the middle of existing rows.</description>
	 	</function>
	 	<function name="guiGridListRemoveColumn" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<description>This allows you to delete columns that exist in grid lists.</description>
	 	</function>
	 	<function name="guiGridListRemoveRow" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<description>This allows you to delete rows that exist in grid lists.</description>
	 	</function>
	 	<function name="guiGridListSetItemData" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<param name="var data" type="required" />
	 		 	<description>This function sets a Item Data associated to a grid list item.</description>
	 	</function>
	 	<function name="guiGridListSetItemText" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool section" type="required" />
	 		 	<param name="bool number" type="required" />
	 		 	<description>This function changes the text of a gridlist item.</description>
	 	</function>
	 	<function name="guiGridListSetScrollBars" ret="bool">
	 		 	<param name="element guiGridlist" type="required" />
	 		 	<param name="bool horizontalBar" type="required" />
	 		 	<param name="bool verticalBar" type="required" />
	 		 	<description>This function allows a gridlist's scrollbar to be forced on, or returned to default.</description>
	 	</function>
	 	<function name="guiGridListSetSelectedItem" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int rowIndex" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<description>This function selects an item from a gridlist. If you wish to deselect whatever item is selected, pass 0 as both the rowIndex and columnIndex arguments.</description>
	 	</function>
	 	<function name="guiGridListSetSelectionMode" ret="bool">
	 		 	<param name="guiElement gridlist" type="required" />
	 		 	<param name="int mode" type="required" />
	 		 	<description>This function sets the selection mode of a gui gridlist. For example, the MTA server browser selects a whole row, while the Controls dialog selects a single cell.</description>
	 	</function>
	 	<function name="guiGridListSetSortingEnabled" ret="bool">
	 		 	<param name="element guiGridlist" type="required" />
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>This function allows the disabling or enabling of sorting within a gridlist. Sorting is achieved by clicking a column header. Gridlist items will be sorted according to the clicked column. By default, gridlists have sorting enabled. This function will allow you to toggle this.</description>
	 	</function>
	 	<function name="guiGridListGetSelectedCount" ret="int">
	 		 	<param name="element gridList" type="required" />
	 		 	<description>This function returns the amount of options selected in the specified grid list.</description>
	 	</function>
	 	<function name="guiGridListGetSelectedItems" ret="table">
	 		 	<param name="element gridList" type="required" />
	 		 	<description>This function returns the items selected in the specified grid list.</description>
	 	</function>
	 	<function name="guiGridListSetColumnWidth" ret="bool">
	 		 	<param name="element gridList" type="required" />
	 		 	<param name="int columnIndex" type="required" />
	 		 	<param name="number width" type="required" />
	 		 	<param name="bool relative=true" type="optional" />
	 		 	<description>This allows you to set the width of an existing column in a gridlist.</description>
	 	</function>
	</group>
	<group name="Memos">
	 	<function name="guiCreateMemo" ret="gui-memo">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a new GUI memo. This is a multiline edit box in which the user can input text.</description>
	 	</function>
	 	<function name="guiMemoSetReadOnly" ret="bool">
	 		 	<param name="gui-memo theMemo" type="required" />
	 		 	<param name="bool status" type="required" />
	 		 	<description>This function allows you to set or remove read-only status for a GUI memo. If read-only is set to true, the contents are not editable.</description>
	 	</function>
	 	<function name="guiMemoSetCaretIndex" ret="bool">
	 		 	<param name="gui-memo theMemo" type="required" />
	 		 	<param name="int index" type="required" />
	 		 	<description>This function sets the current position of the caret (the text cursor) within the memo.</description>
	 	</function>
	</group>
	<group name="Progress bars">
	 	<function name="guiCreateProgressBar" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a progress bar.</description>
	 	</function>
	 	<function name="guiProgressBarGetProgress" ret="float">
	 		 	<param name="progressBar theProgressbar" type="required" />
	 		 	<description>This function gets the progress of a progress bar as a percentage</description>
	 	</function>
	 	<function name="guiProgressBarSetProgress" ret="bool">
	 		 	<param name="progressBar theProgressbar" type="required" />
	 		 	<param name="float progress" type="required" />
	 		 	<description>This function is used to set the progress of a progressbar as a percentage.</description>
	 	</function>
	</group>
	<group name="Radio buttons">
	 	<function name="guiCreateRadioButton" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a radio button.</description>
	 	</function>
	 	<function name="guiRadioButtonGetSelected" ret="bool">
	 		 	<param name="element guiRadioButton" type="required" />
	 		 	<description>This function gets a radio button's selection state.</description>
	 	</function>
	 	<function name="guiRadioButtonSetSelected" ret="bool">
	 		 	<param name="element guiRadioButton" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>This function selects or unselects a radio button.</description>
	 	</function>
	</group>
	<group name="Scrollbars">
	 	<function name="guiCreateScrollBar" ret="gui-scrollbar">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool horizontal" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="gui-element parent=nil" type="optional" />
	 		 	<description>This function creates a GUI scrollbar. You can use the functions guiScrollPaneSetHorizontalScrollPosition, guiScrollPaneSetVerticalScrollPosition, guiScrollPaneGetHorizontalScrollPosition and guiScrollPaneGetVerticalScrollPosition to read and modify the scrollbar's scroll.</description>
	 	</function>
	 	<function name="guiScrollBarGetScrollPosition" ret="float">
	 		 	<param name="gui-scrollBar theScrollBar" type="required" />
	 		 	<description>This function gets the scroll amount of a scrollbar as a percentage.</description>
	 	</function>
	 	<function name="guiScrollBarSetScrollPosition" ret="bool">
	 		 	<param name="gui-scrollBar theScrollBar" type="required" />
	 		 	<param name="float amount" type="required" />
	 		 	<description>This function is used to set the scroll amount of a scrollbar as a percentage.</description>
	 	</function>
	</group>
	<group name="Scroll panes">
	 	<function name="guiCreateScrollPane" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="gui-element parent=nil" type="optional" />
	 		 	<description>This creates a GUI scroll pane.</description>
	 	</function>
	<function name="guiScrollPaneSetScrollBars" ret="bool">
	 		 	<param name="element scrollPane" type="required" />
	 		 	<param name="bool horizontal" type="required" />
	 		 	<param name="bool vertical" type="required" />
	 		 	<description>This function allows a scrollpane's scrollbars to be forced on, or returned to default.</description>
	 	</function>
	</group>
	<group name="Static images">
	 	<function name="guiCreateStaticImage" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string path" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a static image using a .png image in the resource.</description>
	 	</function>
	 	<function name="guiStaticImageLoadImage" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="string filename" type="required" />
	 		 	<description>This function allows you to change the image in GUI static image element to another one.</description>
	 	</function>
	</group>
	<group name="Tab panels">
	 	<function name="guiCreateTabPanel" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function creates a Tab Panel, which acts as a template to create Tabs upon.</description>
	 	</function>
	 	<function name="guiGetSelectedTab" ret="element">
	 		 	<param name="element tabPanel" type="required" />
	 		 	<description>This function returns the currently selected tab in the specified tab panel.</description>
	 	</function>
	 	<function name="guiSetSelectedTab" ret="bool">
	 		 	<param name="element tabPanel" type="required" />
	 		 	<param name="element theTab" type="required" />
	 		 	<description>This function is used to change the currently selected tab in a tab panel.</description>
	 	</function>
	</group>
	<group name="Tabs">
	 	<function name="guiCreateTab" ret="element">
	 		 	<param name="string text" type="required" />
	 		 	<param name="element parent" type="required" />
	 		 	<description>This function creates a tab on a pre-existing tab panel. A tab is a button as well as a 'dimension' that can be used to switch between information by clicking on the tabs. Tabs are sorted on a tab panel in the order that they are created.</description>
	 	</function>
	 	<function name="guiDeleteTab" ret="bool">
	 		 	<param name="element tabToDelete" type="required" />
	 		 	<description>This function deletes a tab from a tab panel.</description>
	 	</function>
	</group>
	<group name="Text labels">
	 	<function name="guiCreateLabel" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<param name="element parent=nil" type="optional" />
	 		 	<description>This function is for creating a new GUI label. A label is simply a piece of text that cannot be edited by the user. If you would like to have a bigger text you'd have to change its font because font size is not supported.</description>
	 	</function>
	 	<function name="guiLabelGetFontHeight" ret="float">
	 		 	<param name="element theLabel" type="required" />
	 		 	<description>This function returns the height of the font currently used in a GUI text label.</description>
	 	</function>
	 	<function name="guiLabelGetTextExtent" ret="float">
	 		 	<param name="element theLabel" type="required" />
	 		 	<description>This function returns the extent, or width, of the current text inside a GUI text label.</description>
	 	</function>
	 	<function name="guiLabelSetColor" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="int red" type="required" />
	 		 	<param name="int green" type="required" />
	 		 	<param name="int blue" type="required" />
	 		 	<description>This function allows you to set the color of a GUI label.</description>
	 	</function>
	 	<function name="guiLabelSetHorizontalAlign" ret="bool">
	 		 	<param name="element theLabel" type="required" />
	 		 	<param name="string align" type="required" />
	 		 	<param name="bool wordwrap=false" type="optional" />
	 		 	<description>This function sets the horizontal alignment of a text label.</description>
	 	</function>
	 	<function name="guiLabelSetVerticalAlign" ret="bool">
	 		 	<param name="element theLabel" type="required" />
	 		 	<param name="string align" type="required" />
	 		 	<description>This function sets the vertical alignment of a text label.</description>
	 	</function>
	</group>
	<group name="Windows">
	 	<function name="guiCreateWindow" ret="element">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float width" type="required" />
	 		 	<param name="float height" type="required" />
	 		 	<param name="string titleBarText" type="required" />
	 		 	<param name="bool relative" type="required" />
	 		 	<description>This function is for creating a new GUI window. This provides a base for other gui elements to be created within. However, windows do not have a parent and cannot be created in any GUI elements.</description>
	 	</function>
	 	<function name="guiWindowSetMovable" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool status" type="required" />
	 		 	<description>This function allows you to specify whether or not a user can move a GUI window.</description>
	 	</function>
	 	<function name="guiWindowSetSizable" ret="bool">
	 		 	<param name="element theElement" type="required" />
	 		 	<param name="bool status" type="required" />
	 		 	<description>This function enables or disables user resizing of a GUI window.</description>
	 	</function>
	</group>
	<group name="Input functions">
	 	<function name="bindKey" ret="bool">
	 		 	<param name="string key" type="required" />
	 		 	<param name="string keyState" type="required" />
	 		 	<param name="function handlerFunction" type="required" />
	 		 	<param name="var arguments" type="optional" />
	 		 	<param name="..." type="optional" />
	 		 	<description>Binds the local player's key to a handler function or command, which will be called when the key is pressed.</description>
	 	</function>
	 	<function name="unbindKey" ret="bool">
	 		 	<param name="string key" type="required" />
	 		 	<param name="string keyState" type="optional" />
	 		 	<param name="function handler" type="optional" />
	 		 	<description>Removes an existing key bind from the specified player.</description>
	 	</function>
	 	<function name="getKeyState" ret="bool">
	 		 	<param name="string keyName" type="required" />
	 		 	<description>This function determines if a certain key is pressed or not.</description>
	 	</function>
	 	<function name="getControlState" ret="bool">
	 		 	<param name="string controlName" type="required" />
	 		 	<description>This function will check if the local player is pressing a particular control. Controls are those that affect GTA. If you wish to get the state of another key, use bindKey and a command function.</description>
	 	</function>
	 	<function name="isControlEnabled" ret="bool">
	 		 	<param name="string control" type="required" />
	 		 	<description>Checks whether a GTA control is enabled or disabled for a certain player.</description>
	 	</function>
	 	<function name="setControlState" ret="bool">
	 		 	<param name="string control" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>Sets a state of a specified player's control, as if they pressed or released it.</description>
	 	</function>
	 	<function name="toggleControl" ret="bool">
	 		 	<param name="string control" type="required" />
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>Enables or disables the use of a GTA control for a specific player.</description>
	 	</function>
	 	<function name="toggleAllControls" ret="bool">
	 		 	<param name="bool enabled" type="required" />
	 		 	<param name="bool gtaControls=true" type="optional" />
	 		 	<param name="bool mtaControls=true" type="optional" />
	 		 	<description>Enables or disables the use of all GTA controls for a specified player.</description>
	 	</function>
	 	<function name="getCursorPosition" ret="float, float, float, float, float">
	 		 	<description>This function gets the current position of the mouse cursor.</description>
	 	</function>
	 	<function name="addCommandHandler" ret="bool">
	 		 	<param name="string commandName" type="required" />
	 		 	<param name="function handlerFunction" type="required" />
	 		 	<param name="bool caseSensitive=true" type="optional" />
	 		 	<description>This function will attach a scripting function (handler) to a console command, so that whenever the local player uses the command the function is called.</description>
	 	</function>
	 	<function name="removeCommandHandler" ret="bool">
	 		 	<param name="string commandName" type="required" />
	 		 	<param name="function handler" type="optional" />
	 		 	<description>This function removes a command handler, that is one that has been added using addCommandHandler. This function can only remove command handlers that were added by the resource that it is called in.</description>
	 	</function>
	 	<function name="executeCommandHandler" ret="bool">
	 		 	<param name="string commandName" type="required" />
	 		 	<param name="string args" type="optional" />
	 		 	<description>This function will call all the attached functions of an existing console command, for a specified player.</description>
	 	</function>
	 	<function name="getBoundKeys" ret="table">
	 		 	<param name="string command/control" type="required" />
	 		 	<description>Returns a list of key names that are bound to the specified game control or console command.</description>
	 	</function>
	 	<function name="getAnalogControlState" ret="float">
	 		 	<param name="string controlName" type="required" />
	 		 	<description>This retrieves the analog control state of a control. This is useful for detecting sensitive controls, such as those used on a joypad.</description>
	 	</function>
	 	<function name="setCursorPosition" ret="bool">
	 		 	<param name="int cursorX" type="required" />
	 		 	<param name="int cursorY" type="required" />
	 		 	<description>This function sets the current position of the mouse cursor.</description>
	 	</function>
	</group>
	<group name="Marker functions">
	 	<function name="createMarker" ret="marker">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="string type" type="optional" />
	 		 	<param name="int size" type="optional" />
	 		 	<param name="int r" type="optional" />
	 		 	<param name="int g" type="optional" />
	 		 	<param name="int b" type="optional" />
	 		 	<param name="int a" type="optional" />
	 		 	<description>This function creates a marker. A marker is a 3D model in the world that can highlight a particular point or area, often used to instruct players where to go to perform actions such as entering buildings.</description>
	 	</function>
	 	<function name="getMarkerColor" ret="int, int, int, int">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<description>This function returns the color and transparency for a marker element. Not all marker types support transparency.</description>
	 	</function>
	 	<function name="getMarkerCount" ret="int">
	 		 	<description>Returns the number of markers that currently exist in the world.</description>
	 	</function>
	 	<function name="getMarkerIcon" ret="string">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<description>This function returns the icon name for a marker.</description>
	 	</function>
	 	<function name="getMarkerSize" ret="float">
	 		 	<param name="marker myMarker" type="required" />
	 		 	<description>This function returns a float containing the size of the specified marker.</description>
	 	</function>
	 	<function name="getMarkerTarget" ret="float, float, float">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<description>This function returns the position of the specified marker's target, the position it points to. This only works for checkpoint markers and ring markers. For checkpoints it returns the position the arrow is pointing to, for ring markers it returns the position the ring is facing. You can set this target with setMarkerTarget.</description>
	 	</function>
	 	<function name="getMarkerType" ret="string">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<description>This function returns a marker's type.</description>
	 	</function>
	 	<function name="setMarkerColor" ret="bool">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<param name="int r" type="required" />
	 		 	<param name="int g" type="required" />
	 		 	<param name="int b" type="required" />
	 		 	<param name="int a" type="required" />
	 		 	<description>This function sets the color of the specified marker by modifying the values for red, green and blue.</description>
	 	</function>
	 	<function name="setMarkerIcon" ret="bool">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<param name="string icon" type="required" />
	 		 	<description>This function allows changing the icon of a checkpoint marker.</description>
	 	</function>
	 	<function name="setMarkerSize" ret="bool">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<param name="float size" type="required" />
	 		 	<description>This function sets the size of the specified marker.</description>
	 	</function>
	 	<function name="setMarkerTarget" ret="bool">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>This function sets the 'target' for a marker. Only the checkpoint and ring marker types can have a target.</description>
	 	</function>
	 	<function name="setMarkerType" ret="bool">
	 		 	<param name="marker theMarker" type="required" />
	 		 	<param name="string markerType" type="required" />
	 		 	<description>This function changes a marker's type. The type controls how the marker is displayed in the game. It's important that you use marker types that users are used to from the single player game. For example, checkpoints are used in races, rings are used for aircraft races, arrows are used for entering buildings etc.</description>
	 	</function>
	</group>
	<group name="Object functions">
	 	<function name="createObject" ret="object">
	 		 	<param name="int modelid" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="float rx" type="optional" />
	 		 	<param name="float ry" type="optional" />
	 		 	<param name="float rz" type="optional" />
	 		 	<description>Creates an object in the GTA world.</description>
	 	</function>
	 	<function name="moveObject" ret="bool">
	 		 	<param name="object theObject" type="required" />
	 		 	<param name="int time" type="required" />
	 		 	<param name="float targetx" type="required" />
	 		 	<param name="float targety" type="required" />
	 		 	<param name="float targetz" type="required" />
	 		 	<param name="float moverx" type="optional" />
	 		 	<param name="float movery" type="optional" />
	 		 	<param name="float moverz" type="optional" />
	 		 	<description>This function will smoothly move an object from its current position to a specified rotation and position.</description>
	 	</function>
	 	<function name="getObjectRotation" ret="float, float, float">
	 		 	<param name="object theObject" type="required" />
	 		 	<description>Object rotation can be retrieved from objects in mapfiles or objects that are created in scripts.</description>
	 	</function>
	 	<function name="setObjectRotation" ret="bool">
	 		 	<param name="object theObject" type="required" />
	 		 	<param name="float rotX" type="required" />
	 		 	<param name="float rotY" type="required" />
	 		 	<param name="float rotZ" type="required" />
	 		 	<description>Allows you to change an object's rotation while playing a map. The object can be from the map file or created in a script.</description>
	 	</function>
	 	<function name="setObjectScale" ret="bool">
	 		 	<param name="object theObject" type="required" />
	 		 	<param name="float scale" type="required" />
	 		 	<description>This function changes the visible size of an object. It is very important to note that this does not affect the collision models for the object, as such this is unsuitable for use for interaction with players, vehicles or other objects.</description>
	 	</function>
	 	<function name="stopObject" ret="bool">
	 		 	<param name="object theobject" type="required" />
	 		 	<description>This will allow you to stop an object that is currently moving.</description>
	 	</function>
	 	<function name="isObjectStatic" ret="bool">
	 		 	<param name="object theObject" type="required" />
	 		 	<description>Use this function to test whether an object is static (unaffected by gravity or pushing) or not.</description>
	 	</function>
	 	<function name="setObjectStatic" ret="bool">
	 		 	<param name="object theObject" type="required" />
	 		 	<param name="bool toggle" type="required" />
	 		 	<description>Makes an object static or non-static. Static objects are rock solid in one place, unaffected by gravity and pushing. Nonstatic objects can fall, be pushed around etc.</description>
	 	</function>
	</group>
	<group name="Output functions">
	 	<function name="outputChatBox" ret="bool">
	 	 	<param name="string text" type="required" />
	 	 	<param name="int r=255" type="optional" />
	 	 	<param name="int g=255" type="optional" />
	 	 	<param name="int b=255" type="optional" />
	 	 	<param name="bool colorCoded=false" type="optional" />
	 	 	<description>This outputs the specified text string to the chatbox. It can be specified as a message to certain player(s) or all players. It can optionally allow you to embed color changes into the string by setting the colorCoded boolean to true.</description>
	 	</function>
	 	<function name="outputConsole" ret="bool">
	 		 	<param name="string text" type="required" />
	 		 	<description>This outputs the specified text string to the console window (accessed with F8 or ~ key). It can be specified as a message to certain player(s) or all players.</description>
	 	</function>
	 	<function name="outputDebugString" ret="bool">
	 		 	<param name="string text" type="required" />
	 		 	<param name="int level=3" type="optional" />
	 		 	<param name="int red=255" type="optional" />
	 		 	<param name="int green=255" type="optional" />
	 		 	<param name="int blue=255" type="optional" />
	 		 	<description>This function outputs scripting debug messages, which can be read by enabling the debug textbox. The debug display level can then be set so that info or warning messages get filtered out.</description>
	 	</function>
	 	<function name="showChat" ret="bool">
	 		 	<param name="bool show" type="required" />
	 		 	<description>This function is used to show or hide the player's chat.</description>
	 	</function>
	</group>
	<group name="Ped functions">
	 	<function name="canPedBeKnockedOffBike" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function checks if the given ped can fall off bikes.</description>
	 	</function>
	 	<function name="createPed" ret="ped">
	 		 	<param name="int modelid" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>Creates a Ped in the GTA world.</description>
	 	</function>
	 	<function name="doesPedHaveJetPack" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Checks whether or not a ped currently has a jetpack.</description>
	 	</function>
	 	<function name="getPedAmmoInClip" ret="int">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int weaponSlot=current" type="optional" />
	 		 	<description>This function returns an integer that contains the ammo in a specified ped's weapon. See Weapon Info</description>
	 	</function>
	 	<function name="getPedAnimation" ret="string, string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Gets the animation of a player or ped that was set using setPedAnimation.</description>
	 	</function>
	 	<function name="getPedAnimationData" ret="table">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function is used to return the animation data of a player or ped that was set using setPedAnimation or blendPedAnimation.</description>
	 	</function>
	 	<function name="getPedArmor" ret="float">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function returns the current armor of the specified ped.</description>
	 	</function>
	 	<function name="getPedBonePosition" ret="float, float, float">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int bone" type="required" />
	 		 	<description>Returns the 3D world coordinates of a specific bone of a given ped.</description>
	 	</function>
	 	<function name="getPedClothes" ret="string, string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int clothesType" type="required" />
	 		 	<description>This function is used to get the current clothes texture and model of a certain type on a ped.</description>
	 	</function>
	 	<function name="getPedContactElement" ret="element">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function detects the element a ped is standing on. This can be a vehicle or an object.</description>
	 	</function>
	 	<function name="getPedControlState" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string control" type="required" />
	 		 	<description>Checks whether a ped has a certain control pressed.</description>
	 	</function>
		<function name="getPedWeaponMuzzlePosition" ret="float, float, float">
	 		 	<param name="ped thePed" type="required" />
				<description>This function gets the world position of the current weapon's muzzle.</description>
		</function>
	 	<function name="getPedOccupiedVehicle" ret="vehicle">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function gets the vehicle that the ped is currently in, if any.</description>
	 	</function>
	 	<function name="getPedRotation" ret="float">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Gets the rotation of a ped.</description>
	 	</function>
	 	<function name="getPedSimplestTask" ret="string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function is used to get the name of a specified ped's current simplest task.</description>
	 	</function>
	 	<function name="getPedSkin" ret="int">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function returns the specified ped's skin.</description>
	 	</function>
	 	<function name="getPedStat" ret="float">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int stat" type="required" />
	 		 	<description>This function returns the value of the specified statistic of a specific ped.</description>
	 	</function>
	 	<function name="getPedTarget" ret="element">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function is used to get the element a ped is currently targeting.</description>
	 	</function>
	 	<function name="getPedTargetCollision" ret="float, float, float">
	 		 	<param name="ped targetingPed" type="required" />
	 		 	<description>This function allows retrieval of where a ped's target is blocked. It will only be blocked if there is an obstacle within a ped's target range.</description>
	 	</function>
	 	<function name="getPedTargetEnd" ret="float, float, float">
	 		 	<param name="ped targetingPed" type="required" />
	 		 	<description>This function allows retrieval of the position where a ped's target range ends, when he is aiming with a weapon.</description>
	 	</function>
	 	<function name="getPedTargetRange" ret="float">
	 		 	<param name="ped targetingPed" type="required" />
	 		 	<description>This function allows retrieval of a ped's target range when he is aiming with a weapon.</description>
	 	</function>
	 	<function name="getPedTargetStart" ret="float, float, float">
	 		 	<param name="ped targetingPed" type="required" />
	 		 	<description>This function allows retrieval of the position a ped's target range begins, when he is aiming with a weapon.</description>
	 	</function>
	 	<function name="getPedTask" ret="string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string priority" type="required" />
	 		 	<param name="int taskType" type="required" />
	 		 	<param name="int index=0" type="optional" />
	 		 	<description>This function is used to get the name of the current task of a certain type for a ped.</description>
	 	</function>
	 	<function name="getPedTotalAmmo" ret="int">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int weaponSlot=current" type="optional" />
	 		 	<description>This function returns an integer that contains the total ammo in a specified ped's weapon. See Weapon Info</description>
	 	</function>
	 	<function name="getPedVoice" ret="string, string">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Gets the current voice of a ped.</description>
	 	</function>
	 	<function name="getPedWeapon" ret="int">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int weaponSlot=current" type="optional" />
	 		 	<description>This function tells you which weapon type is in a certain weapon slot of a ped. See Weapon Info</description>
	 	</function>
	 	<function name="getPedWeaponSlot" ret="int">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function gets a ped's selected weapon slot.</description>
	 	</function>
	 	<function name="isPedChoking" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function checks if the specified ped is choking (coughing) or not. This happens as a result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray can.</description>
	 	</function>
	 	<function name="isPedDoingGangDriveby" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function checks if the ped is in the driveby state.</description>
	 	</function>
	 	<function name="isPedDoingTask" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string taskName" type="required" />
	 		 	<description>This function checks if the specified ped is carrying out a certain task.</description>
	 	</function>
	 	<function name="isPedDucked" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function checks if the specified ped is ducked (crouched) or not.</description>
	 	</function>
	 	<function name="isPedHeadless" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>With this function, you can check if a ped has a head or not.</description>
	 	</function>
	 	<function name="isPedInVehicle" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Checks whether or not a given ped is currently in a vehicle.</description>
	 	</function>
	 	<function name="isPedInWater" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>Checks whether or not a ped is currently in water.</description>
	 	</function>
	 	<function name="isPedOnFire" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function checks if the specified ped is on fire or not.</description>
	 	</function>
	 	<function name="isPedOnGround" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<description>This function is used to determine whether or not a ped is on the ground. This is for on-foot usage only.</description>
	 	</function>
	 	<function name="setPedAimTarget" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>This function allows you to set a ped's aim target to a specific point.</description>
	 	</function>
	 	<function name="setPedAnimation" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string block=nil" type="optional" />
	 		 	<param name="string anim=nil" type="optional" />
	 		 	<param name="int time=-1" type="optional" />
	 		 	<param name="bool loop=true" type="optional" />
	 		 	<param name="bool updatePosition=true" type="optional" />
	 		 	<param name="bool interruptable=true" type="optional" />
	 		 	<description>Sets the current animation of a player or ped. Not specifying the type of animation will automatically cancel the current one.</description>
	 	</function>
	 	<function name="setPedCameraRotation" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="float cameraRotation" type="required" />
	 		 	<description>This function sets the camera rotation of a ped.</description>
	 	</function>
	 	<function name="setPedCanBeKnockedOffBike" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="bool canBeKnockedOffBike" type="required" />
	 		 	<description>This function controls if a ped can fall of his bike by accident - namely by banging into a wall.</description>
	 	</function>
	 	<function name="setPedControlState" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string control" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>Makes a ped press or release a certain control.</description>
	 	</function>
	 	<function name="setPedDoingGangDriveby" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>This function sets the driveby state of a ped.</description>
	 	</function>
	 	<function name="setPedHeadless" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="bool headState" type="required" />
	 		 	<description>With this function, you can set if a ped has a head or not.</description>
	 	</function>
	 	<function name="setPedLookAt" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="int time=3000" type="optional" />
	 		 	<param name="element target" type="optional" />
	 		 	<description>Makes a ped turn his head and look at a specific world position or element.</description>
	 	</function>
	 	<function name="setPedOnFire" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="bool isOnFire" type="required" />
	 		 	<description>This function can be used to set a ped on fire or extinguish a fire on it.</description>
	 	</function>
	 	<function name="setPedRotation" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="float rotation" type="required" />
	 		 	<description>This function allows you to set the current rotation of the specified ped.</description>
	 	</function>
	 	<function name="setPedSkin" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int skinID" type="required" />
	 		 	<description>This function changes the skin of a ped.</description>
	 	</function>
	 	<function name="setPedVoice" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="string voiceType" type="required" />
	 		 	<param name="string voiceName" type="required" />
	 		 	<description>Changes the voice of a ped.</description>
	 	</function>
	 	<function name="setPedWeaponSlot" ret="bool">
	 		 	<param name="ped thePed" type="required" />
	 		 	<param name="int weaponSlot" type="required" />
	 		 	<description>This function changes the selected weapon slot of a ped.</description>
	 	</function>
	</group>
	<group name="Pickup functions">
	 	<function name="createPickup" ret="pickup">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="int type" type="required" />
	 		 	<param name="int amount/weapon/model" type="required" />
	 		 	<param name="int respawnTime=30000" type="optional" />
	 		 	<param name="int ammo=50" type="optional" />
	 		 	<description>This function creates a pickup element, which is placed in the GTA world and can be picked up to retrieve a health, armour or a weapon.</description>
	 	</function>
	 	<function name="getPickupAmmo" ret="int">
	 		 	<param name="pickup thePickup" type="required" />
	 		 	<description>This function retrieves the amount of ammo in a weapon pickup.</description>
	 	</function>
	 	<function name="getPickupAmount" ret="int">
	 		 	<param name="pickup thePickup" type="required" />
	 		 	<description>This function retrieves the amount of health or armor given from a pickup.</description>
	 	</function>
	 	<function name="getPickupType" ret="int">
	 		 	<param name="pickup thePickup" type="required" />
	 		 	<description>This function retrieves the type of a pickup, either a health, armour or weapon pickup.</description>
	 	</function>
	 	<function name="getPickupWeapon" ret="int">
	 		 	<param name="pickup thePickup" type="required" />
	 		 	<description>This function retrieves the weapon ID of a weapon pickup.</description>
	 	</function>
	 	<function name="setPickupType" ret="bool">
	 		 	<param name="pickup thePickup" type="required" />
	 		 	<param name="int type" type="required" />
	 		 	<param name="int amount/weapon" type="required" />
	 		 	<param name="int ammo" type="optional" />
	 		 	<description>This function allows changing the type of a pickup to a Weapon, Armour or Health pickup, and allows you to set the health points or the weapon and ammo that the pickup will give.</description>
	 	</function>
	</group>
	<group name="Player functions">
	 	<function name="getLocalPlayer" ret="player">
	 		 	<description>This function gets the player element of the client running the current script.</description>
	 	</function>
	 	<function name="getPlayerName" ret="string">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This function returns a string containing the name of the specified player.</description>
	 	</function>
	 	<function name="getPlayerNametagColor" ret="int, int, int">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This function gets the current color of a player's name tag as RGB values. These are in the range 0-255.</description>
	 	</function>
	 	<function name="getPlayerNametagText" ret="string">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This will allow you to retrieve the name tag a player is currently using.</description>
	 	</function>
	 	<function name="getPlayerPing" ret="int">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This function returns the ping of a specified player. The ping is the number of milliseconds that data takes to travel from the player's client to the server or vice versa.</description>
	 	</function>
	 	<function name="getPlayerTeam" ret="team">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This function gets the current team a player is on.</description>
	 	</function>
	 	<function name="isPlayerDead" ret="bool">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>This function checks if the specified player is dead or not.</description>
	 	</function>
	 	<function name="isPlayerMapForced" ret="bool">
	 		 	<description>This function checks if the specified player's radar map has been forced on or not.</description>
	 	</function>
	 	<function name="isPlayerMapVisible" ret="bool">
	 		 	<description>This function checks if the local player has their map showing</description>
	 	</function>
	 	<function name="isPlayerMuted" ret="bool">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<description>Use this function to check if a player has been muted.</description>
	 	</function>
	 	<function name="showPlayerHudComponent" ret="bool">
	 		 	<param name="string component" type="required" />
	 		 	<param name="bool show" type="required" />
	 		 	<description>This function will show or hide a part of the player's HUD.</description>
	 	</function>
	 	<function name="getPlayerMapBoundingBox" ret="int,int,int,int">
	 		 	<description>This function gets the GUI bounding box of the radar map texture.</description>
	 	</function>
	 	<function name="getPlayerMoney" ret="int">
	 		 	<description>Returns the amount of money the local player currently has.</description>
	 	</function>
	 	<function name="givePlayerMoney" ret="bool">
	 		 	<param name="int amount" type="required" />
	 		 	<description>This function adds money to the local player's current money amount. To set absolute values, setPlayerMoney can be used.</description>
	 	</function>
	 	<function name="setPlayerMoney" ret="bool">
	 		 	<param name="int amount" type="required" />
	 		 	<description>Sets the local player's money to a certain value, regardless of current player money. It should be noted that setting negative values does not work and in fact gives the player large amounts of money.</description>
	 	</function>
	 	<function name="setPlayerNametagColor" ret="bool">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<param name="int r" type="required" />
	 		 	<param name="int g" type="required" />
	 		 	<param name="int b" type="required" />
	 		 	<description>This allows you to change the RGB color mixture in the name tags of players.</description>
	 	</function>
	 	<function name="setPlayerNametagShowing" ret="bool">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<param name="bool showing" type="required" />
	 		 	<description>Use this to define whether the player's name tag is visible or invisible.</description>
	 	</function>
	 	<function name="setPlayerNametagText" ret="bool">
	 		 	<param name="player thePlayer" type="required" />
	 		 	<param name="string text" type="required" />
	 		 	<description>This will change the text of a player's nickname in the world to something besides the nickname he chose. This will not change the player's actual nickname, it only changes the visible aspect inside the world (you will see his original nickname in the scoreboard and will refer to his original name in scripts).</description>
	 	</function>
	 	<function name="takePlayerMoney" ret="bool">
	 		 	<param name="int amount" type="required" />
	 		 	<description>This function subtracts money from the local player's current money amount.</description>
	 	</function>
	</group>
	<group name="Projectile functions">
	 	<function name="createProjectile" ret="projectile">
	 		 	<param name="element creator" type="required" />
	 		 	<param name="int weaponType" type="required" />
	 		 	<param name="float posX" type="optional" />
	 		 	<param name="float posY" type="optional" />
	 		 	<param name="float posZ" type="optional" />
	 		 	<param name="float force=1.0" type="optional" />
	 		 	<param name="element target=nil" type="optional" />
	 		 	<param name="float rotX" type="optional" />
	 		 	<param name="float rotY" type="optional" />
	 		 	<param name="float rotZ" type="optional" />
	 		 	<param name="float velX" type="optional" />
	 		 	<param name="float velY" type="optional" />
	 		 	<param name="float velZ" type="optional" />
	 		 	<param name="int model" type="optional" />
	 		 	<description>This function creates a projectile of the specified type on the specified coordinates.</description>
	 	</function>
	 	<function name="getProjectileType" ret="int">
	 		 	<param name="projectile theProjectile" type="required" />
	 		 	<description>This function returns the type of the specified projectile.</description>
	 	</function>
	</group>
	<group name="Radar-area functions">
	 	<function name="createRadarArea" ret="radararea">
	 		 	<param name="float centerX" type="required" />
	 		 	<param name="float centerY" type="required" />
	 		 	<param name="float sizeX" type="required" />
	 		 	<param name="float sizeY" type="required" />
	 		 	<param name="int r=255" type="optional" />
	 		 	<param name="int g=0" type="optional" />
	 		 	<param name="int b=0" type="optional" />
	 		 	<param name="int a=255" type="optional" />
	 		 	<description>This function can be used to create custom radar areas on the radar.</description>
	 	</function>
	 	<function name="getRadarAreaColor" ret="int, int, int, int">
	 		 	<param name="radararea theRadararea" type="required" />
	 		 	<description>This function can be used to retrieve the current color of a radar area.</description>
	 	</function>
	 	<function name="getRadarAreaSize" ret="float, float">
	 		 	<param name="radararea theRadararea" type="required" />
	 		 	<description>This function is used for getting the X and Y size of an existing radar area.</description>
	 	</function>
	 	<function name="isInsideRadarArea" ret="bool">
	 		 	<param name="radararea theArea" type="required" />
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<description>This function checks if a 2D position is inside a radararea or not.</description>
	 	</function>
	 	<function name="isRadarAreaFlashing" ret="bool">
	 		 	<param name="radararea theRadararea" type="required" />
	 		 	<description>This function allows detection of whether a radar area is flashing or not.</description>
	 	</function>
	 	<function name="setRadarAreaColor" ret="bool">
	 		 	<param name="radararea theRadarArea" type="required" />
	 		 	<param name="int r" type="required" />
	 		 	<param name="int g" type="required" />
	 		 	<param name="int b" type="required" />
	 		 	<param name="int a" type="required" />
	 		 	<description>Sets the color of an existing radar area.</description>
	 	</function>
	 	<function name="setRadarAreaFlashing" ret="bool">
	 		 	<param name="radararea theRadarArea" type="required" />
	 		 	<param name="bool flash" type="required" />
	 		 	<description>This function makes an existing radar area flash in transparency.</description>
	 	</function>
	 	<function name="setRadarAreaSize" ret="bool">
	 		 	<param name="radararea theRadararea" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<description>This function changes the size of an existing radar area.</description>
	 	</function>
	</group>
	<group name="Resource functions">
	 	<function name="call" ret="var...">
	 		 	<param name="resource theResource" type="required" />
	 		 	<param name="string theFunction" type="required" />
	 		 	<param name="arguments..." type="optional" />
	 		 	<description>This function is used to call a function from another resource (which must be running).</description>
	 	</function>
	 	<function name="getResourceConfig" ret="xmlnode">
	 		 	<param name="string filepath" type="optional" />
	 		 	<description>This function is used to return the root node of a configuration file. Config files must be predefined in a resource's meta file. An alternative way to load XML files is to use xmlLoadFile.</description>
	 	</function>
	 	<function name="getResourceFromName" ret="resource">
	 		 	<param name="string resourceName" type="required" />
	 		 	<description>This function is used to retrieve a resource from its name. A resource's name is the same as its folder or file archive name on the server (without the extension).</description>
	 	</function>
	 	<function name="getResourceGUIElement" ret="element">
	 		 	<description>This function gets the resource GUI element.</description>
	 	</function>
	 	<function name="getResourceName" ret="string">
	 		 	<param name="resource res" type="required" />
	 		 	<description>This function gets the name of the specified resource.</description>
	 	</function>
	 	<function name="getResourceRootElement" ret="element">
	 		 	<param name="resource theResource=getThisResource()" type="optional" />
	 		 	<description>This function retrieves a resource's root element. The resource's root element is the element in the element tree which is the parent of all elements that belong to a particular resource (except for elements specifically created elsewhere). You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).</description>
	 	</function>
	 	<function name="getThisResource" ret="resource">
	 		 	<description>This function retrieves the resource from which the function call was made.</description>
	 	</function>
	</group>
	<group name="Serial functions">
	 	<function name="getPlayerUserName" ret="string">
	 		 	<description>This function returns the community.mtasa.com (or mtabeta.com) account of the specified user.</description>
	 	</function>
	</group>
	<group name="Team functions">
	 	<function name="countPlayersInTeam" ret="int">
	 		 	<param name="team theTeam" type="required" />
	 		 	<description>This function is for returning the number of players in the specified team.</description>
	 	</function>
	 	<function name="getTeamColor" ret="int, int, int">
	 		 	<param name="team theTeam" type="required" />
	 		 	<description>This function retrieves the color of a team.</description>
	 	</function>
	 	<function name="getTeamFriendlyFire" ret="bool">
	 		 	<param name="team theTeam" type="required" />
	 		 	<description>This function tells you if friendly fire is turned on for the specified team.</description>
	 	</function>
	 	<function name="getTeamFromName" ret="team">
	 		 	<param name="string teamName" type="required" />
	 		 	<description>This function finds a team object by the team's name.</description>
	 	</function>
	 	<function name="getTeamName" ret="string">
	 		 	<param name="team theTeam" type="required" />
	 		 	<description>This function gets the team name of a team object.</description>
	 	</function>
	 	<function name="getPlayersInTeam" ret="table">
	 		 	<param name="team theTeam" type="required" />
	 		 	<description>This function retrieves all the players of the specified team.</description>
	 	</function>
	</group>
	<group name="Utility functions">
	 	<function name="getDistanceBetweenPoints2D" ret="float">
	 		 	<param name="float x1" type="required" />
	 		 	<param name="float y1" type="required" />
	 		 	<param name="float x2" type="required" />
	 		 	<param name="float y2" type="required" />
	 		 	<description>This function returns the distance between two 2 dimensional points using the pythagorean theorem.</description>
	 	</function>
	 	<function name="getDistanceBetweenPoints3D" ret="float">
	 		 	<param name="float x1" type="required" />
	 		 	<param name="float y1" type="required" />
	 		 	<param name="float z1" type="required" />
	 		 	<param name="float x2" type="required" />
	 		 	<param name="float y2" type="required" />
	 		 	<param name="float z2" type="required" />
	 		 	<description>This function returns the distance between two 3 dimensional points using the pythagorean theorem.</description>
	 	</function>
	 	<function name="getRealTime" ret="table">
	 		 	<param name="int seconds=current" type="optional" />
	 		 	<description>This function gets the real server time and returns it in a table. If you want to get the in-game time (shown on GTA's clock) use getTime.</description>
	 	</function>
	 	<function name="getTickCount" ret="int">
	 		 	<description>This function returns amount of time that your system has been running in milliseconds. By comparing two values of getTickCount, you can determine how much time has passed (in milliseconds) between two events. This could be used to determine how efficient your code is, or to time how long a player takes to complete a task.</description>
	 	</function>
	 	<function name="getTimers" ret="table">
	 		 	<param name="time" type="optional" />
	 		 	<description>This function returns a table of all active timers. Alternatively, only the timers with a remaining time less than or equal to a certain value can be retrieved.</description>
	 	</function>
	 	<function name="gettok" ret="string">
	 		 	<param name="string text" type="required" />
	 		 	<param name="int tokenNumber" type="required" />
	 		 	<param name="int separatingCharacter" type="required" />
	 		 	<description>This function splits a string using the given separating character and returns one specified substring.</description>
	 	</function>
	 	<function name="killTimer" ret="bool">
	 		 	<param name="timer theTimer" type="required" />
	 		 	<description>This function allows you to kill/halt existing timers.</description>
	 	</function>
	 	<function name="setTimer" ret="timer">
	 		 	<param name="function theFunction" type="required" />
	 		 	<param name="int timeInterval" type="required" />
	 		 	<param name="int timesToExecute" type="required" />
	 		 	<param name="var arguments..." type="optional" />
	 		 	<description>This function allows you to trigger a function after a number of milliseconds have elapsed. You can call one of your own functions or a built-in function. For example, you could set a timer to spawn a player after a number of seconds have elapsed.</description>
	 	</function>
	 	<function name="split" ret="table">
	 		 	<param name="string, stringToSplit" type="required" />
	 		 	<param name="int separatingChar" type="required" />
	 		 	<description>This function splits a string into substrings. You specify a character that will act as a separating character; this will determine where to split the sub-strings. For example, it can split the string "Hello World" into two strings containing the two words, by spliting using a space as a separator.</description>
	 	</function>
	 	<function name="getVersion" ret="table">
	 		 	<description>This function gives you various version information about MTA and the operating system.</description>
	 	</function>
	 	<function name="isTimer" ret="bool">
	 		 	<param name="var theVariable" type="required" />
	 		 	<description>This function checks if a variable is a timer.</description>
	 	</function>
	 	<function name="md5" ret="string">
	 		 	<param name="string str" type="required" />
	 		 	<description>Calculates the MD5 hash of the specified string and returns its hexadecimal representation.</description>
	 	</function>
	 	<function name="tocolor" ret="int">
	 		 	<param name="int red" type="required" />
	 		 	<param name="int green" type="required" />
	 		 	<param name="int blue" type="required" />
	 		 	<param name="int alpha=255" type="optional" />
	 		 	<description>This function retrieves the hex number of a specified color, useful for the dx functions.</description>
	 	</function>
	</group>
	<group name="Vehicle functions">
	 	<function name="addVehicleUpgrade" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int upgrade" type="required" />
	 		 	<description>This function adds an upgrade to an existing vehicle, eg: nos, hyrdraulics.</description>
	 	</function>
	 	<function name="attachTrailerToVehicle" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="vehicle theTrailer" type="required" />
	 		 	<description>This function attaches a trailer type vehicle to a trailer-towing-type vehicle.</description>
	 	</function>
	 	<function name="blowVehicle" ret="bool">
	 		 	<param name="vehicle vehicleToBlow" type="required" />
	 		 	<param name="bool explode=true" type="optional" />
	 		 	<description>This function will blow up a vehicle. This will cause an explosion and will kill the driver and any passengers inside it.</description>
	 	</function>
	 	<function name="createVehicle" ret="vehicle">
	 		 	<param name="int model" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="float rx" type="optional" />
	 		 	<param name="float ry" type="optional" />
	 		 	<param name="float rz" type="optional" />
	 		 	<param name="string numberplate" type="optional" />
	 		 	<description>This function creates a vehicle at the specified location.</description>
	 	</function>
	 	<function name="detachTrailerFromVehicle" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="vehicle theTrailer" type="optional" />
	 		 	<description>This function detaches an already attached trailer from a vehicle.</description>
	 	</function>
	 	<function name="fixVehicle" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function will set a vehicle's health to full and fix its damage model. If you wish to only change the vehicle's health, without affecting its damage model, use setElementHealth.</description>
	 	</function>
	 	<function name="getVehicleAdjustableProperty" ret="bool/int">
	 		 	<param name="vehicle" type="required" />
	 		 	<description>Use this to get the value of a vehicles adjustable property. This property relates to movable parts of a model, for example hydra jets or dump truck tray.</description>
	 	</function>
	 	<function name="getVehicleColor" ret="int, int, int, int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns the color of the specified vehicle. A vehicle can have up to four colors.</description>
	 	</function>
	 	<function name="getVehicleCompatibleUpgrades" ret="table">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int slot" type="optional" />
	 		 	<description>This function returns a table of all the compatible upgrades (or all for a specified slot, optionally) for a specifed vehicle.</description>
	 	</function>
	 	<function name="getVehicleController" ret="player">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to get the player in control of the specified vehicle.</description>
	 	</function>
	 	<function name="getVehicleDoorState" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int door" type="required" />
	 		 	<description>This function returns the current state of a specifed door on the vehicle.</description>
	 	</function>
	 	<function name="getVehicleLandingGearDown" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to check whether a vehicle's landing gear is down or not. Only planes can be used with this function.</description>
	 	</function>
	 	<function name="getVehicleLightState" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int light" type="required" />
	 		 	<description>This function returns the current state of the specified light on the vehicle.</description>
	 	</function>
	 	<function name="getVehicleMaxPassengers" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns the maximum number of passengers that a specified vehicle can hold. Only passenger seats are counted, the driver seat is excluded.</description>
	 	</function>
	 	<function name="getVehicleName" ret="string">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns a string containing the name of the vehicle</description>
	 	</function>
	 	<function name="getVehicleOccupant" ret="player">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int seat=0" type="optional" />
	 		 	<description>This function gets the player sitting in the specified vehicle.</description>
	 	</function>
	 	<function name="getVehicleOverrideLights" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to find out the current state of the override-lights setting of a vehicle.</description>
	 	</function>
	 	<function name="getVehiclePaintjob" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function gets the current paintjob on the specified vehicle.</description>
	 	</function>
	 	<function name="getVehiclePanelState" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int panel" type="required" />
	 		 	<description>This function returns the current state of a specifed panel on the vehicle. A vehicle can have up to 7 panels.</description>
	 	</function>
	 	<function name="getVehiclePlateText" ret="string">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to retrieve the text on the number plate of a specified vehicle.</description>
	 	</function>
	 	<function name="getVehicleRotation" ret="float, float, float">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function gets the rotation of a vehicle along the X, Y, and Z axes in degrees.</description>
	 	</function>
	 	<function name="getVehicleSirensOn" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns whether the sirens are turned on for the specified vehicle.</description>
	 	</function>
	 	<function name="getVehicleTowedByVehicle" ret="vehicle">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to get the vehicle being towed by another.</description>
	 	</function>
	 	<function name="getVehicleTowingVehicle" ret="vehicle">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to get the vehicle that is towing another.</description>
	 	</function>
	 	<function name="getVehicleTurnVelocity" ret="float, float, float">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function is used to retrieve a vehicle's turning velocity for each axis.</description>
	 	</function>
	 	<function name="getVehicleTurretPosition" ret="float, float">
	 		 	<param name="vehicle turretVehicle" type="required" />
	 		 	<description>This function gets the position of a vehicle's turret, if it has one. Vehicles with turrets include firetrucks and tanks.</description>
	 	</function>
	 	<function name="getVehicleUpgradeOnSlot" ret="int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int slot" type="required" />
	 		 	<description>This function returns the current upgrade id on the specified vehicle's 'upgrade slot'</description>
	 	</function>
	 	<function name="getVehicleUpgrades" ret="table">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns a table of all the upgrades on a specifed vehicle.</description>
	 	</function>
	 	<function name="getVehicleUpgradeSlotName" ret="string">
	 		 	<param name="int slot/upgrade" type="required" />
	 		 	<description>This function returns the name of an upgrade slot name (e.g. roof, spoiler).</description>
	 	</function>
	 	<function name="getVehicleWheelStates" ret="int, int, int, int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function returns the current states of all the wheels on the vehicle.</description>
	 	</function>
	 	<function name="isVehicleFrozen" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function checks if a vehicle has been frozen.</description>
	 	</function>
	 	<function name="isVehicleFuelTankExplodable" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This will tell you if a vehicle's petrol tank is explodable.</description>
	 	</function>
	 	<function name="isVehicleLocked" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This will tell you if a vehicle is locked.</description>
	 	</function>
	 	<function name="isVehicleOnGround" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>Checks to see if a vehicle has contact with the ground.</description>
	 	</function>
	 	<function name="removeVehicleUpgrade" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int upgrade" type="required" />
	 		 	<description>This function removes an already existing upgrade from the specified vehicle, eg: nos, hydraulics. Defined in San Andreas\data\maps\veh_mods\veh_mods.ide.</description>
	 	</function>
	 	<function name="setVehicleAdjustableProperty" ret="bool">
	 		 	<param name="element theVehicle" type="required" />
	 		 	<param name="int value" type="required" />
	 		 	<description>This function is used for adjusting the movable parts of a model, for example hydra jets or dump truck tray. This function only works on vehicles with adjustable properties.</description>
	 	</function>
	 	<function name="setVehicleColor" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int color1" type="required" />
	 		 	<param name="int color2" type="required" />
	 		 	<param name="int color3" type="required" />
	 		 	<param name="int color4" type="required" />
	 		 	<description>This function will set the color of a vehicle. Each vehicle can have up to 4 colors, for different aspects of the vehicle. Most vehicles only use two of the colors.</description>
	 	</function>
	 	<function name="setVehicleDamageProof" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool damageProof" type="required" />
	 		 	<description>This functions makes a vehicle damage proof, so it won't take damage from bullets, hits, explosions or fire. A damage proof's vehicle health can still be changed via script. Also, flipping the vehicle still causes it to explode.</description>
	 	</function>
	 	<function name="setVehicleDirtLevel" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int dirtLevel" type="required" />
	 		 	<description>This function sets the dirt level on a vehicle.</description>
	 	</function>
	 	<function name="setVehicleDoorState" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int door" type="required" />
	 		 	<param name="int state" type="required" />
	 		 	<description>This function sets the damage state of a specified door on a vehicle.</description>
	 	</function>
	 	<function name="setVehicleDoorsUndamageable" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool state" type="required" />
	 		 	<description>This function makes a vehicle's doors undamageable, so they won't fall off when they're hit. Note that the vehicle has to be locked using setVehicleLocked for this setting to have any effect.</description>
	 	</function>
	 	<function name="setVehicleEngineState" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool engineState" type="required" />
	 		 	<description>This function turns a vehicle's engine on or off. Note that the engine will always be turned on when someone enters the driver seat, unless you override that behaviour with scripts.</description>
	 	</function>
	 	<function name="setVehicleFrozen" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool freezeStatus" type="required" />
	 		 	<description>This function freezes a vehicle (stops it in its position and disables movement) or unfreezes it.</description>
	 	</function>
	 	<function name="setVehicleFuelTankExplodable" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool explodable" type="required" />
	 		 	<description>This function changes the 'explodable state' of a vehicle's fuel tank, which toggles the ability to blow the vehicle up by shooting the tank. This function will have no effect on vehicles with tanks that cannot be shot in single player.</description>
	 	</function>
	 	<function name="setVehicleGunsEnabled" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool gunsEnabled" type="required" />
	 		 	<description>This function enables or disables the weapons on a vehicle</description>
	 	</function>
	 	<function name="setVehicleLandingGearDown" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool gearState" type="required" />
	 		 	<description>This function is used to set the landing gear state of certain vehicles.</description>
	 	</function>
	 	<function name="setVehicleLightState" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int light" type="required" />
	 		 	<param name="int state" type="required" />
	 		 	<description>This function sets the state of the light on the vehicle.</description>
	 	</function>
	 	<function name="setVehicleLocked" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool locked" type="required" />
	 		 	<description>This function can be used to set a vehicle to be locked or unlocked. Locking a vehicle restricts access to all doors of a vehicle.</description>
	 	</function>
	 	<function name="setVehicleOverrideLights" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int value" type="required" />
	 		 	<description>This function changes the light overriding setting on a vehicle.</description>
	 	</function>
	 	<function name="setVehiclePaintjob" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int value" type="required" />
	 		 	<description>This function changes the paintjob on the specified vehicle.</description>
	 	</function>
	 	<function name="setVehiclePanelState" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int panelID" type="required" />
	 		 	<param name="int state" type="required" />
	 		 	<description>This function allows you to change the state of one of the six panels vehicle's can have. When executed on the server-side resources, the damage will be synched for all players, whereas the change is only client-side if the function is used in a client resource.</description>
	 	</function>
	 	<function name="setVehicleRotation" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="rx" type="required" />
	 		 	<param name="ry" type="required" />
	 		 	<param name="rz" type="required" />
	 		 	<description>This function rotates a vehicle around a single point.</description>
	 	</function>
	 	<function name="setVehicleSirensOn" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="bool sirensOn" type="required" />
	 		 	<description>This function changes the state of the sirens on the specified vehicle.</description>
	 	</function>
	 	<function name="setVehicleTurnVelocity" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="float rx" type="required" />
	 		 	<param name="float ry" type="required" />
	 		 	<param name="float rz" type="required" />
	 		 	<description>Sets the angular velocity of a vehicle. Basically applies a spin to it.</description>
	 	</function>
	 	<function name="setVehicleWheelStates" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int frontLeft" type="required" />
	 		 	<param name="int rearLeft=-1" type="optional" />
	 		 	<param name="int frontRight=-1" type="optional" />
	 		 	<param name="int rearRight=-1" type="optional" />
	 		 	<description>This function sets the state of wheels on the vehicle.</description>
	 	</function>
	 	<function name="getHelicopterRotorSpeed" ret="float">
	 		 	<param name="vehicle heli" type="required" />
	 		 	<description>Retrieves the speed at which the rotor of a helicopter rotates.</description>
	 	</function>
	 	<function name="getTrainDirection" ret="bool">
	 		 	<param name="vehicle train" type="required" />
	 		 	<description>Gets the direction in which a train is driving (clockwise or counterclockwise).</description>
	 	</function>
	 	<function name="getTrainSpeed" ret="float">
	 		 	<param name="vehicle train" type="required" />
	 		 	<description>Gets the speed at which a train is traveling on the rails.</description>
	 	</function>
	 	<function name="getVehicleGravity" ret="float, float, float">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>Retrieves the current gravity vector of a vehicle. This is the direction in which the vehicle falls, also the cameras of any passengers will be rotated to match it.</description>
	 	</function>
	 	<function name="getVehicleHeadLightColor" ret="int, int, int">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function will get the headlight color of a vehicle.</description>
	 	</function>
	 	<function name="getVehicleModelFromName" ret="int">
	 		 	<param name="string name" type="required" />
	 		 	<description>This function retrieves the model ID of a vehicle as an integer value from its name.</description>
	 	</function>
	 	<function name="getVehicleNameFromModel" ret="string">
	 		 	<param name="int model" type="required" />
	 		 	<description>Gets the name of a vehicle by its model ID.</description>
	 	</function>
	 	<function name="getVehicleType" ret="string">
	 		 	<param name="vehicle theVehicle/int modelId" type="required" />
	 		 	<description>This function retrieves the type of a vehicle (such as if it is a car or a boat).</description>
	 	</function>
	 	<function name="isTrainDerailable" ret="bool">
	 		 	<param name="vehicle vehicleToCheck" type="required" />
	 		 	<description>This function will check if a train or tram is derailable.</description>
	 	</function>
	 	<function name="isTrainDerailed" ret="bool">
	 		 	<param name="vehicle vehicleToCheck" type="required" />
	 		 	<description>This function will check if a train or tram is derailed.</description>
	 	</function>
	 	<function name="isVehicleBlown" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<description>This function allows you to determine whether a vehicle is blown or still intact.</description>
	 	</function>
	 	<function name="isVehicleTaxiLightOn" ret="bool">
	 		 	<param name="vehicle taxi" type="required" />
	 		 	<description>This function will get the taxi light state of a taxi (vehicle ID's 420 and 438)</description>
	 	</function>
	 	<function name="setHelicopterRotorSpeed" ret="bool">
	 		 	<param name="vehicle heli" type="required" />
	 		 	<param name="float speed" type="required" />
	 		 	<description>Sets the rotor speed of a helicopter.</description>
	 	</function>
	 	<function name="setTrainDerailable" ret="bool">
	 		 	<param name="vehicle derailableVehicle" type="required" />
	 		 	<param name="bool derailable" type="required" />
	 		 	<description>This function will set a train or tram as derailable. This is, if it can derail when it goes above the maximum speed.</description>
	 	</function>
	 	<function name="setTrainDerailed" ret="bool">
	 		 	<param name="vehicle vehicleToDerail" type="required" />
	 		 	<param name="bool derailed" type="required" />
	 		 	<description>This function will set a train or tram as derailed.</description>
	 	</function>
	 	<function name="setTrainDirection" ret="bool">
	 		 	<param name="vehicle train" type="required" />
	 		 	<param name="bool clockwise" type="required" />
	 		 	<description>Sets the direction in which a train or tram drives over the rails (clockwise or counterclockwise).</description>
	 	</function>
	 	<function name="setTrainSpeed" ret="bool">
	 		 	<param name="vehicle train" type="required" />
	 		 	<param name="float speed" type="required" />
	 		 	<description>Sets the on-track speed of a train.</description>
	 	</function>
	 	<function name="setVehicleGravity" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>Sets the gravity vector of a vehicle. The vehicle will fall in this direction, and the camera of any passengers will also be rotated to match it. Can be used for e.g. driving on walls or driving upside down.</description>
	 	</function>
	 	<function name="setVehicleHeadLightColor" ret="bool">
	 		 	<param name="vehicle theVehicle" type="required" />
	 		 	<param name="int red" type="required" />
	 		 	<param name="int green" type="required" />
	 		 	<param name="int blue" type="required" />
	 		 	<description>This function will set the headlight color of a vehicle. valid Red Green and Blue arguments range from 0-255</description>
	 	</function>
	 	<function name="setVehicleTaxiLightOn" ret="bool">
	 		 	<param name="vehicle taxi" type="required" />
	 		 	<param name="bool LightState" type="required" />
	 		 	<description>This function will set the taxi light on in a taxi (vehicle ID's 420 and 438)</description>
	 	</function>
	</group>
	<group name="Water functions">
	 	<function name="getWaveHeight" ret="float">
	 		 	<description>This function returns the current wave height.</description>
	 	</function>
	 	<function name="setWaveHeight" ret="bool">
	 		 	<param name="float height" type="required" />
	 		 	<description>This function sets the wave height to the desired value, the default is 0.</description>
	 	</function>
	 	<function name="createWater" ret="water">
	 		 	<param name="float x1" type="required" />
	 		 	<param name="float y1" type="required" />
	 		 	<param name="float z1" type="required" />
	 		 	<param name="float x2" type="required" />
	 		 	<param name="float y2" type="required" />
	 		 	<param name="float z2" type="required" />
	 		 	<param name="float x3" type="required" />
	 		 	<param name="float y3" type="required" />
	 		 	<param name="float z3" type="required" />
	 		 	<param name="float x4" type="optional" />
	 		 	<param name="float y4" type="optional" />
	 		 	<param name="float z4" type="optional" />
	 		 	<description>Creates an area of water.</description>
	 	</function>
	 	<function name="getWaterLevel" ret="bool/float">
	 		 	<param name="float posX" type="required" />
	 		 	<param name="float posY" type="required" />
	 		 	<param name="float posZ" type="required" />
	 		 	<description>This function allows you to retrieve the water level from a certain location. The water level is 0 in most places though it can vary (e.g. it's higher near the dam).</description>
	 	</function>
	 	<function name="getWaterVertexPosition" ret="float, float, float">
	 		 	<param name="water theWater" type="required" />
	 		 	<param name="int vertexIndex" type="required" />
	 		 	<description>Gets the world position of a vertex (i.e. corner) of a water area. Each water area is either a triangle or quad (rectangle) so each has 3 or 4 corners.</description>
	 	</function>
	 	<function name="resetWaterColor" ret="bool">
	 		 	<description>This function reset the water color of the GTA world to default.</description>
	 	</function>
	 	<function name="setWaterColor" ret="bool">
	 		 	<param name="int red" type="required" />
	 		 	<param name="int green" type="required" />
	 		 	<param name="int blue" type="required" />
	 		 	<param name="int alpha=200" type="optional" />
	 		 	<description>This function changes the water color of the GTA world.</description>
	 	</function>
	 	<function name="setWaterLevel" ret="bool">
	 		 	<param name="water theWater" type="optional" />
	 		 	<param name=" float level" type="optional" />
	 		 	<description>Sets the height of some or all the water in the game world.</description>
	 	</function>
	 	<function name="setWaterVertexPosition" ret="bool">
	 		 	<param name="water theWater" type="required" />
	 		 	<param name="int vertexIndex" type="required" />
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>Sets the world position of a corner point of a water area.</description>
	 	</function>
	</group>
	<group name="Weapon functions">
	 	<function name="getWeaponIDFromName" ret="int">
	 		 	<param name="string name" type="required" />
	 		 	<description>This function will obtain the ID of a particular weapon from its name.</description>
	 	</function>
	 	<function name="getWeaponNameFromID" ret="string">
	 		 	<param name="int id" type="required" />
	 		 	<description>This function allows you to retrieve the name of a weapon from an ID. Note it also allows you to retrieve the name of other methods of death, such as Fall and Rammed.</description>
	 	</function>
	</group>
	<group name="World functions">
	 	<function name="getGameSpeed" ret="bool">
	 		 	<description>This function gets the current game speed value.</description>
	 	</function>
	 	<function name="getGravity" ret="float">
	 		 	<description>This function returns the current gravity level for the context in which it is called (server or client).</description>
	 	</function>
	 	<function name="getGroundPosition" ret="float">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<description>This function gets the Z level of the highest ground below a point.</description>
	 	</function>
	 	<function name="getScreenFromWorldPosition" ret="float, float">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="float edgeTolerance=0" type="optional" />
	 		 	<param name="bool relative=true" type="optional" />
	 		 	<description>This function gets the screen position of a point in the world. This is useful for attaching 2D gui elements to parts of the world (e.g. players) or detecting if a point is on the screen (though it does not check if it is actually visible, you should use processLineOfSight for that).</description>
	 	</function>
	 	<function name="getTime" ret="int, int">
	 		 	<description>This function is used to get the current time in the game. If you want to get the real server time, use getRealTime.</description>
	 	</function>
	 	<function name="getWeather" ret="bool">
	 		 	<description>This function returns the current weather id.</description>
	 	</function>
	 	<function name="getWorldFromScreenPosition" ret="float, float, float">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float depth" type="required" />
	 		 	<description>This function allows you to retrieve the world position corresponding to the 2D position on the screen, at a certain depth.</description>
	 	</function>
	 	<function name="getZoneName" ret="string">
	 		 	<param name="float x" type="required" />
	 		 	<param name="float y" type="required" />
	 		 	<param name="float z" type="required" />
	 		 	<param name="bool citiesonly=false" type="optional" />
	 		 	<description>This function allows you to retrieve the zone name of a certain location.</description>
	 	</function>
	 	<function name="isLineOfSightClear" ret="bool">
	 		 	<param name="float startX" type="required" />
	 		 	<param name="float startY" type="required" />
	 		 	<param name="float startZ" type="required" />
	 		 	<param name="float endX" type="required" />
	 		 	<param name="float endY" type="required" />
	 		 	<param name="float endZ" type="required" />
	 		 	<param name="bool checkBuildings=true" type="optional" />
	 		 	<param name="bool checkVehicles=true" type="optional" />
	 		 	<param name="bool checkPeds=true" type="optional" />
	 		 	<param name="bool checkObjects=true" type="optional" />
	 		 	<param name="bool checkDummies=true" type="optional" />
	 		 	<param name="bool seeThroughStuff=false" type="optional" />
	 		 	<param name="bool ignoreSomeObjectsForCamera=false" type="optional" />
	 		 	<param name="element ignoredElement=nil" type="optional" />
	 		 	<description>This function checks if there are obstacles between two points of the game world, optionally ignoring certain kinds of elements.</description>
	 	</function>
	 	<function name="processLineOfSight" ret="bool, float, float, float, element">
	 		 	<param name="float startX" type="required" />
	 		 	<param name="float startY" type="required" />
	 		 	<param name="float startZ" type="required" />
	 		 	<param name="float endX" type="required" />
	 		 	<param name="float endY" type="required" />
	 		 	<param name="float endZ" type="required" />
	 		 	<param name="bool checkBuildings=true" type="optional" />
	 		 	<param name="bool checkVehicles=true" type="optional" />
	 		 	<param name="bool checkPlayers=true" type="optional" />
	 		 	<param name="bool checkObjects=true" type="optional" />
	 		 	<param name="bool checkDummies=true" type="optional" />
	 		 	<param name="bool seeThroughStuff=false" type="optional" />
	 		 	<param name="bool ignoreSomeObjectsForCamera=false" type="optional" />
	 		 	<param name="bool shootThroughStuff=false" type="optional" />
	 		 	<param name="element ignoredElement=nil" type="optional" />
	 		 	<description>This function checks if there is anything between 2 points in the world, and if there is, tells you where and what. The two positions must be within the local player's draw distance as the collision data is not loaded outside this area.</description>
	 	</function>
	 	<function name="resetSkyGradient" ret="bool">
	 		 	<description>This function allows restoring of a changed sky gradient as a result of setSkyGradient.</description>
	 	</function>
	 	<function name="setGameSpeed" ret="bool">
	 		 	<param name="int value" type="required" />
	 		 	<description>This function sets the game speed to the given value.</description>
	 	</function>
	 	<function name="setGravity" ret="bool">
	 		 	<param name="float level" type="required" />
	 		 	<description>This function sets the server's gravity level. Note that this does not effect peds/players and their vehicles; to set ped/player gravity use setPedGravity.</description>
	 	</function>
	 	<function name="setSkyGradient" ret="bool">
	 		 	<param name="int topRed=0" type="optional" />
	 		 	<param name="int topGreen=0" type="optional" />
	 		 	<param name="int topBlue=0" type="optional" />
	 		 	<param name="int bottomRed=0" type="optional" />
	 		 	<param name="int bottomGreen=0" type="optional" />
	 		 	<param name="int bottomBlue=0" type="optional" />
	 		 	<description>This function changes the sky color to a two-color gradient.</description>
	 	</function>
	 	<function name="setTime" ret="bool">
	 		 	<param name="int hour" type="required" />
	 		 	<param name="int minute" type="required" />
	 		 	<description>This function sets the current GTA time to the given time.</description>
	 	</function>
	 	<function name="setWeather" ret="bool">
	 		 	<param name="int weatherID" type="required" />
	 		 	<description>This function instantly sets the current weather id to the given value.</description>
	 	</function>
	 	<function name="setWeatherBlended" ret="bool">
	 		 	<param name="int weatherID" type="required" />
	 		 	<description>This function will change the weather from the current weather (set using setWeather) to another weather state over a period of 60 seconds. The weather will be fully changed within 2 minutes. To ensure smooth weather transition, you should not call this function until getWeather indicates that no transition is already being done.</description>
	 	</function>
	 	<function name="testLineAgainstWater" ret="bool, float, float, float">
	 		 	<param name="float startX" type="required" />
	 		 	<param name="float startY" type="required" />
	 		 	<param name="float startZ" type="required" />
	 		 	<param name="float endX" type="required" />
	 		 	<param name="float endY" type="required" />
	 		 	<param name="float endZ" type="required" />
	 		 	<description>This function checks to see if a line between two points collides with the water. This is similar to processLineOfSight, but only collides with water. Waves are taken into account when testing the line.</description>
	 	</function>
	 	<function name="getCloudsEnabled" ret="bool">
	 		 	<description>This function will tell you if clouds are enabled or disabled.</description>
	 	</function>
	 	<function name="getGarageBoundingBox" ret="float, float, float, float">
	 		 	<param name="int garageID" type="required" />
	 		 	<description>This function outputs the bounding box of a garage.</description>
	 	</function>
	 	<function name="getGaragePosition" ret="float, float, float">
	 		 	<param name="int garageID" type="required" />
	 		 	<description>This function outputs X, Y and Z position of given garage.</description>
	 	</function>
	 	<function name="getGarageSize" ret="float, float, float">
	 		 	<param name="int garageID" type="required" />
	 		 	<description>This function outputs the size of garage.</description>
	 	</function>
	 	<function name="getMinuteDuration" ret="int">
	 		 	<description>Tells you how long an ingame minute takes in real-world milliseconds. The default GTA value is 1000.</description>
	 	</function>
	 	<function name="getBlurLevel" ret="int">
	 		 	<description>This function allows you to check the current blur level of a specified player.</description>
	 	</function>
	 	<function name="isGarageOpen" ret="bool">
	 		 	<param name="int garageID" type="required" />
	 		 	<description>This function checks whether or not a specific garage door is open.</description>
	 	</function>
	 	<function name="isWorldSpecialPropertyEnabled" ret="bool">
	 		 	<param name="string propname" type="required" />
	 		 	<description>Checks if a special world property (cheat) is enabled or not.</description>
	 	</function>
	 	<function name="setCloudsEnabled" ret="bool">
	 		 	<param name="bool enabled" type="required" />
	 		 	<description>This function will enable or disable clouds. This is useful for race maps which are placed high up as clouds can cause low FPS.</description>
	 	</function>
	 	<function name="setGarageOpen" ret="bool">
	 		 	<param name="int garageID" type="required" />
	 		 	<param name="bool open" type="required" />
	 		 	<description>This function opens or closes the specified garage door in the world.</description>
	 	</function>
	 	<function name="setJetpackMaxHeight" ret="bool">
	 		 	<param name="float Height" type="required" />
	 		 	<description>This function changes the maximum flying height of jetpack.</description>
	 	</function>
	 	<function name="setMinuteDuration" ret="bool">
	 		 	<param name="int milliseconds" type="required" />
	 		 	<description>Sets the real-world duration of an ingame minute. The GTA default is 1000.</description>
	 	</function>
	 	<function name="setBlurLevel" ret="bool">
	 		 	<param name="int level" type="required" />
	 		 	<description>Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.</description>
	 	</function>
	 	<function name="setWorldSpecialPropertyEnabled" ret="bool">
	 		 	<param name="string propname" type="required" />
	 		 	<param name="bool enable" type="required" />
	 		 	<description>Enables or disables a special world property (cheat).</description>
	 	</function>
	</group>
  <group name="XML functions">
    <function name="xmlCopyFile" ret="xmlnode">
      <param name="xmlnode nodeToCopy" type="required" />
      <param name="string newFilename" type="required" />
      <param name="resource inResource=getThisResource()" type="optional" />
      <description>This function copies all contents of a certain node in a XML document to a new document file, so the copied node becomes the new file's root node.</description>
    </function>
    <function name="xmlCreateFile" ret="xmlnode">
      <param name="string filename" type="required" />
      <param name="string rootNodeName" type="required" />
      <param name="resource inResource=getThisResource()" type="optional" />
      <description>This function creates a new XML document, which can later be saved to a file by using xmlSaveFile. This function will overwrite the file specified if it already exists.</description>
    </function>
    <function name="xmlDestroyNode" ret="bool">
      <param name="xmlnode theXMLNode" type="required" />
      <description>This function destroys a XML node from the XML node tree.</description>
    </function>
    <function name="xmlLoadFile" ret="xmlnode">
      <param name="string filename" type="required" />
      <param name="resource fromResource=getThisResource ()" type="optional" />
      <description>This function provides an alternative way to load XML files to getResourceConfig.</description>
    </function>
    <function name="xmlNodeGetAttribute" ret="string">
      <param name="xmlnode node" type="required" />
      <param name="string name" type="required" />
      <description>This function is used to return an attribute of a node in a configuration file.</description>
    </function>
    <function name="xmlNodeGetValue" ret="string">
      <param name="xmlnode theXMLNode" type="required" />
      <description>This function is made to be able to read tag values in XML files (eg. &lt;something&gt;anything&lt;/something&gt;).</description>
    </function>
    <function name="xmlNodeSetAttribute" ret="bool">
      <param name="xmlnode node" type="required" />
      <param name="string name" type="required" />
      <param name="var value" type="required" />
      <description>This function is used to edit an attribute of a node in a configuration file.</description>
    </function>
    <function name="xmlNodeSetValue" ret="bool">
      <param name="xmlnode theXMLNode" type="required" />
      <param name="string value" type="required" />
      <description>This function is made to be able to assign values to tags in XML files (eg. &lt;something&gt;anything&lt;/something&gt;).</description>
    </function>
    <function name="xmlSaveFile" ret="bool">
      <param name="xmlnode rootNode" type="required" />
      <description>This function saves a loaded XML file.</description>
    </function>
    <function name="xmlUnloadFile" ret="bool">
      <param name="xmlnode node" type="required" />
      <description>Unloads an XML document from memory.</description>
    </function>
    <function name="xmlCreateChild" ret="xmlnode">
      <param name="xmlnode parentNode" type="required" />
      <param name="string tagName" type="required" />
      <description>This function creates a new child node under an XML node.</description>
    </function>
    <function name="xmlFindChild" ret="xmlnode">
      <param name="xmlnode parent" type="required" />
      <param name="string tagName" type="required" />
      <param name="int index" type="required" />
      <description>This function returns a named child node of an XML node.</description>
    </function>
    <function name="xmlNodeGetAttributes" ret="table">
      <param name="xmlnode node" type="required" />
      <description>Returns all the attributes of a specific XML node.</description>
    </function>
    <function name="xmlNodeGetChildren" ret="table/xmlnode">
      <param name="xmlnode parent" type="required" />
      <param name="int index" type="optional" />
      <description>This function returns all children of a particular XML node, or a particular child node.</description>
    </function>
    <function name="xmlNodeGetName" ret="string">
      <param name="xmlnode node" type="required" />
      <description>Gets the tag name of the specified XML node.</description>
    </function>
    <function name="xmlNodeGetParent" ret="xmlnode">
      <param name="xmlnode node" type="required" />
      <description>Returns the parent node of an xml node.</description>
    </function>
    <function name="xmlNodeSetName" ret="bool">
      <param name="xmlnode node" type="required" />
      <param name="string name" type="required" />
      <description>Sets the tag name of the specified XML node.</description>
    </function>
  </group>
</funcs>
